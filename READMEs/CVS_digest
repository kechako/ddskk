-*- outline -*-

             $Date: 2000/10/30 22:14:09 $ Mikio Nakajima/中島幹夫 <minakaji@osaka.email.ne.jp>
	     $Id: CVS_digest,v 1.4 2000/10/30 22:14:09 minakaji Exp $

[CVS ダイジェスト]

自分の理解を助けるために書いたものです。間違いのご指摘、簡便なやり方が
他にあるなどの情報をいただければ幸いです。

* cvs server repositry tree

  $CVSROOT(openlab.ring.gr.jp:/circus/cvsroot)
     |
     |
     +-- skk --+-- main (Main distribution -- Emacs Lisp, info, tutorials, etc)
     	       |
	       |
	       +-- dic (Dictionaries)
	       |
	       |
	       +-- tools (Dictionary maintenance tools)
	       |
	       |
	       +-- pySKK (SKK related libraries using python)

* cvs サーバからのソースの入手

** Login

まず guest アカウントで openlab.ring.gr.jp の cvs server にログインし
ます (openlab.ring.gr.jp の cvs server 用に個人のアカウントを持ってらっ
しゃる方は、それを使いましょう)。

  $ cvs -d :pserver:guest@openlab.ring.gr.jp:/circus/cvsroot login

プロンプトが出るので、パスワードに `guest' を入れ、CR しましょう。

  CVS password: guest (CR)

~/.cvspass というファイルに password が記録され、次からは明示的な
login は不要になります (*注1)。


** Checkout

Checkout して cvs server からソースをもらってきます (このファイルをワー
キングコピーといいます) (*注2)。Maintrunk を入手したければ、下記のようにします。

  $ cvs -d :pserver:guest@openlab.ring.gr.jp:/circus/cvsroot checkout skk/main

Daredevil branch を入手したければ、下記のようにします。

  $ cvs -d :pserver:guest@openlab.ring.gr.jp:/circus/cvsroot checkout -r daredevil skk/main

カレントディレクトリの下にできる skk/main というディレクトリにワーキン
グコピーがコピーされます。

  $ cd skk/main

コンパイルして使うなり、編集するなり (但し編集結果を server のソースに
反映するにはご自分専用の account が必要です) ご自由にどうぞ。

** Update

ワーキングコピーは残しておくと、cvs server 上のソースに変更が加えられ
たときに差分だけ取り寄せ、ワーキングコピーを最新の状態にすることができ
ます。
ワーキングコピーは、openlab.ring.gr.jp:/circus/cvsroot を指しているこ
とを記憶している (*注3) ので、update から始めると、自動的にログインでき
ます。

   $ cvs update


* 手元のソースを変更して cvs server にあるソースに変更を反映する (commit, tagify)。

** cvs account の発行

openlab.ring.gr.jp の cvs server 上にアカウントがないと update,
commit, tag できません。minakaji@ring.gr.jp 宛てに希望するアカウント名
と、crypt されたパスワード文字列を「私信で」連絡して下さい(*注4)。

登録が完了したらご連絡申し上げます。

** Login

まず、openlab.ring.gr.jp の cvs server にログインします。

  $ cvs -d :pserver:your_account@openlab.ring.gr.jp:/circus/cvsroot login
                    ^^^^^^^^^^^^

登録されたパスワードを入力して下さい。

  CVS password: ** (CR)

次からは明示的な login 手続きは要りません。

 

** Checkout/Update

前述の guest アカウントによる checkout/update と手続き的には同じです。


** Commit

下記の手順を踏んで commit して下さいね。

(1)まず、ワーキングコピーのソースを自分の環境でコンパイル & インストー
   ルします。

(2)自分が普段使っている環境で動作確認をして下さい。(少なくとも一度、
   SKK を起動 & 終了して問題がないことを確認してね)。

(3)ML に投稿するためのリリースノートを書いて下さい (主な変更点が分る程
   度の簡単なもので結構です) 。この際、上記でインストールした新たなワー
   キングコピーからコンパイルした SKK を必ず使用して下さい。

(4)リリースノートの記事を書いている間中も SKK に問題がなければ、ワーキ
   グコピーを commit して上記リリースノートを ML に投稿して下さい。

(5)ChangeLog の更新をお忘れなく (英語で書いていますが、英語が苦痛なら
   日本語で書いても全然問題ありません)(*注5)。

  $ cd skk/main
  $ cvs commit -m "あなたのコメントをここに。" ChangeLog
  $ cvs commit -m "あなたのコメントをここに。" skk.el


** guest で入手したワーキングコピーを自分の account を使って commit する方法

guest で checkout したワーキングコピーは guest@openlab.ring.gr.jp で
login するよう CVS/Root に情報が収納されていますので、commit するなど、
cvs server 上のソースに変更を加える場合は、この情報を

   `自分のアカウント名@openlab.ring.gr.jp'

に変更するか、自分のアカウントを使って再度 checkout する必要があります。

その他、cvs のオプションに

   `-d :pserver:your_account@openlab.ring.gr.jp:/circus/cvsroot'

を指定して commit することで、強制的に your_account での commit を行な
うことができます。


** Tagify

Daredevil SKK に新たな機能を加えた人は、このファイルと同じディレクトリ
にある Codename というファイルの中身を参照して tag 付けして下さい (但
し、tag には空白文字を含めることができないようなので、TAG 付けするのは、
Codename のうち、駅名の部分だけで結構です)。

     $ cvs tag (Codename) .

Maintrunk には tag 付けしないで下さい。Maintrunk の tag 付けルールはま
だ考えていません

* 脚注

** 注1

ワーキングコピーは、openlab.ring.gr.jp:/circus/cvsroot を指しているこ
とを記憶している (*注3) ので、ワーキングコピーを置いているディレクトリ
で checkout, update, commit, tag などの cvs コマンドを実行すると、自動
的に openlab.ring.gr.jp にログインして、それぞれのコマンドを実行します。


** 注2

~/.cvsrc に、

  cvs -z9

と書いておくと、cvs server との通信内容が圧縮されます。


** 注3

ワーキングコピーのあるディレクトリ (及びそのサブディレクトリ) の
CVS/Root というファイルにサーバ情報が保存されています。

** 注4

crypt されたパスワード文字列を生成するには、いくつかの方法があります
(但し、openlab.ring.gr.jp の crypt() が DES based なため、貴殿のシステ
ムライブラリーの crypt() が DES base な場合に限り利用できます)。

1. /etc/passwd から直接取り出す。

2. perl, python, ruby などの interpreter 系のコマンドを使うことによっ
   ても生成できます。

     % perl -e 'print crypt("PASSWORD", "SALT"), "\n";'

     % python -c 'import crypt; print crypt.crypt("PASSWORD", "SALT");'

     % ruby -e 'print "PASSWORD".crypt("SALT"), "\n";'

       *上記の "SALT" の部分は、集合 [a-zA-Z0-9./] から 2 文字の文字列を任意に選んで
        指定します。この文字列はアルゴリズムの出力を 4096 通りにかき乱すのに、また
        encrypt して出力される文字列の先頭 2 文字として使われます。

3. crypt() 関数を使う他のコマンドを利用する (Debian GNU/Linux の
   mkpasswd や makepasswd など)。

4. 上記の方法のいずれも利用できない方は、素のパスワードを送って下さっ
   ても結構です。


** 注5

Emacs の cvs front end、pcl-cvs を使うと、commit のために C キー
(`cvs-mode-changelog-commit') を押すと ChangeLog から、当日 commiter
自身が書いた部分を抜き出して、log を書く手助けをしてくれます。

[end of CVS_digest]
