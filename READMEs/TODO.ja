-*- outline -*-

             $Date: 2005/11/28 03:43:51 $
	     $Id: TODO.ja,v 1.12 2005/11/28 03:43:51 skk-cvs Exp $


* 近い内に解決すべき TODO


* 変換モード

** 変換モード毎に異なる動作をするコマンド

例えば、skk-toggle-characters (`skk-toggle-kana'、`q' キーにバインド)
では、■モードでは、ひらがなモードとカタカナモードをトグルで変更し、
▽モードでは入力モードに変更を加えることなく、見出し語をひらがな <->
かたかなでトグルし、確定します。

このように変換モードの状態により異なる動作をするコマンドは SKK の中に
は沢山あります。これをもう少し統一的に書けないかな、とふと思いました。


* 補完機能

** 動的補完機能の abbrev モードへの適応

skk-dcomp.el による動的補完は便利だが、現在 skk-abbrev-mode での英数字
入力変換時に無効となっている。これを有効にできるようにしたい。

実装は難しくはないと思われる。

skk-dcomp は基本的に defadvice によって、既存の関数の挙動を操作する
ことで動的補完を実現している。

skk-abbrev-mode では各文字キーは Emacs 標準の self-insert-command を呼
ぶので、これに defadvice してもよければ dcomp を有効にできると思われる。
それがまずければ、skk-abbrev-mode の文字キーに独自のコマンドを割り当て
てもよい。

問題があるとすると、skk-use-look、 skk-look-recursive-search、
skk-look-use-ispell といったオプションが有効だった場合。この場合は、補
完候補が多くなりすぎて速度的な問題を生じる可能性がある。実用的には
skk-use-look を t に、 skk-look-recursive-search と
skk-look-use-ispell を nil に束縛して、個人辞書と /usr/dict/words を補
完対象とするのが快適かもしれない。


* Hint from MSIME

** 手書き検索

ああいう機能欲しいよね...。実現困難か...。

(tomoe と連携する？)

** 同音異義語に対する意味のバルーン表示 (MSIME98 以降) [DONE]

漢字に弱いぼく (中島) としては絶対欲しい!  XEmacs と skk-lookup.el と
itimer.el があれば実現は比較的簡単 (itimer は、候補表示後一定期間入力
がないことをチェックするのに利用)?  バルーン表示は GNU Emacs では無理
かな。itimier.el の機能は GNU Emacs では?

あと、SKK では 4 番目までの候補は MSIME と異なりインライン表示されるが、
これらの意味はどうやって表示しましょ?

意味表示は skk-annotation で実現。バルーン表示は FSF Emacs については
tooltip の利用により実現された。

** On demand 意味表示

常に意味をバルーン表示するのは鬱陶しいと思う人もいるので、普段は off
にしておき、意味を知りたくなったときに on demand で表示する、という機
能はありうると思う。しかもこのようなやり方の場合、SKK の annotation に
拘る必要はなく、lookup や sdic など利用してもよいと思われる。

** カスタマイズ

Emacs のカスタマイズはあまりかっこ良くないし、使いたい、という気になら
ないですね...。pySKK ではかっこ良くて使い易い GUI を提供したいもんです。
Emacs では改善の余地なし?

skk-cus は widget を使ってどの程度の UI を実現できるか示したもの。この
レベルでよければこれを拡張してもよい。

さらに、実装ごとに設定ファイルを作る不便を改善するのがよい、という提案
がある。統合的デスクトップ環境においてはそれができればとても有効だと思
われる。ただし他の SKK variant の動向を見極めることも必要。

** 候補の表示位置

標準では SKK の候補一覧表示はエコーエリアが使われる。最近の拡張で
window を分割してポップアップしたり、さらには Emacs の tooltip の機能
を使ってバルーン表示もできるようになった。

このバルーン表示は変換を実行している座標近くに候補が見えるため、眼球の
運動がごく少なくて済み、ユーザフレンドリーである。ただし tooltip は次
候補表示の際に tooltip frame を再構築するためやや重く、視覚的にもチラ
つきとして知覚されることがある。

2005 年になり uim.el が公開されたが、これは overlay の機能を用いて、使
用中の window 内に候補一覧をインライン表示することができる。この実装は
tooltip のように GUI に依存することなく同等の使用感を得られる点におい
て大変優れている。SKK においても実装される価値があるかもしれない。

インライン表示の機能 は Emacs 21 用に実装された (2005-10-05)。


* 辞書の取り扱い

** 「この辞書からは学習しない」設定ができるとよい

** 「活用」の情報を利用した送りあり変換

ユーザが「泣く」などの変換をした場合、 skk-henkan-okuri-strictly ない
しは skk-henkan-strict-okuri-precedence の環境下では送り仮名「く」が次
回変換から優先される。その際に、その他の活用形
(「泣か」「泣き」「泣い」「泣け」「泣こ」) の優先度も上げられたら便利
である、という提案がある。

これを実現するには

o あらかじめ動詞などの活用の情報を辞書などに埋めこんでおく
o ユーザの入力時に動的に、その単語のすべての活用形を推測する機能を実装
  する

という方法が考えられるが、後者はかなり大変だと思われる。幸い、
SKK-JISYO.notes が三田さんにより作製され、ここの送りありエントリにある
活用の情報を用いれば、前者の方法にて実装できるものと思われる。

注意点として、この機能が実装された場合にそれなりの副作用があることがあ
げられる。とくに種類の異なる品詞、ないしは異なる活用の種類をもつ同種の
品詞について、そのいずれかの活用形の優先度を下げてしまう場合があり、そ
れはユーザの好みと合わない可能性がある。

(例) 「泣く」を確定 → 「無き」「無い」などの優先度が下がる

現在の機能とこの新機能との公約数的機能が実装できれば都合がいいかもしれ
ないが、「原則的に単語変換」という制限の中では難しいものがある。結局、
ユーザオプションで新機能と旧来の機能を選択できるようにするのがいいのか
もしれない。

** 単語に「属性」のある辞書づくりとその利用

辞書の個々の見出し語、候補に属性を持たせる。それにより、例えば、次のよう
な機能を実装する。

1. その属性の内容により、変換の際に候補の絞り込み条件を指定できるように
   する。その際、絞り込み条件はユーザーの任意に変更できるようにする。一
   例をあげれば、サ変動詞になり得る名詞に適当な属性を持たせ、@samp{〜す
   る} という送り仮名が入力された場合には、そのサ変動詞属性を持った名詞
   のみを候補として出力する、など活用の幅は非常に広い。

2. 候補に最終の変換時刻などを属性として持たせ、辞書のメンテナンスに利
   用する(一定期間アクセスのない候補を個人辞書から削除するなど)。

3. 候補に関する意味を属性として持たせ、意味を調べるような拡張変換を行
   えるようにする。

言うは易しだが、色々な未解決の問題がある。多数の見出し語や候補に属性を
持たせて、通常の変換効率をできる限り落さないで、かつ効率良く属性のメン
テナンスを行う方法を模索することがまず大変。Emacs のバッファに読み込む
辞書とサーバ経由でアクセスしている辞書とがあることも検討事項。Emacs 側
の機能で対応した場合にサーバ経由の辞書属性をどうやって得るか、またはそ
の逆が課題である。コーディング抜きであってもアイディアをいただけたら幸
いである。

** 部首変換プログラムと辞書を作ること

** Canna や Wnn のサーバと接続して検索が可能になるようにする

すでに mecab-skkserv によって連文節変換をすること自体は可能になってい
る。また、tamago 4 に倣えば Canna，Wnn などのサーバとの通信は可能と考
えられる。


* コーディング

** Object Oriented programming 採用の可能性

FLIM (http://www.kanji.zinbun.kyoto-u.ac.jp/~tomo/elisp/FLIM/)
に含まれる luna という Emacs Lisp で Object Oriented programming を可能
にするプログラムがあります。著名どころでは、Wanderlust や Emacs-w3m の
Shimbun ライブラリが luna を利用しています。DDSKK は Emacs のバッファに
直接読み込む辞書、サーバ経由の辞書、Lookup とのゲートウェイによる辞書な
ど沢山の辞書があり、また、キーボード入力にも TUT-Code や NICOLA など色々
な種類をサポートしています。luna を利用することにより、これらのそれぞれ
の機能のために、それぞれ個別に書かれた処理を一元管理することができるよ
うになるのではないかと考えています。

** ユーザーオプションのバッファローカル化

いかなるユーザーオプション変数をバッファローカル化しても動作するように
すること。luna 化により解決する?


* 報告された、または確認されているバグ (未修正)

** skk-undo-kakutei-word-only 下での undo 情報の喪失

笠原＠九大さんよりのご報告

> また別の、SKK にバッファの内容を喰われて undo で戻せない現象に当たった
> ので報告します。
> 
> 1) ある行で(うっかり)▽モードに入ってしまう
> 2) そのまま(気づかず)カーソルを下に数行移動
> 3) そこで気付いて(いつもの癖で) C-g を押すと、間の行が全部消えてしまう
> 
> 1)
> 1行目
> 2行目▽あ■←カーソル
> 3行目
> 4行目
> 5行目
> 
> 2)
> 1行目
> 2行目▽あ
> 3行目
> 4行目■←カーソル
> 5行目
> 
> 3)
> 1行目
> 2行目■←カーソル
> 5行目
> 
> 上方向への移動では起こりません。


本件に関する T の考え。 一応今回の件は skk-undo-kakutei-word-only が
non-nil の環境で

 1. keyboard-quit のあとの undo がおかしい
 2. skk-kakutei したあとの undo がおかしい

の 2点が問題。修正の方針を一応考えてみた。

 o keyboard-quit の際はまず skk-kakutei を呼んで
   skk-undo-kakutei-word-only の制御を脱してからその後の処理をする
 
   → 問題が単純化される。あとは 2 のみ解決すればよい
 
 o skk-kakutei の前に強制的に skk-previous-point に移動する
 
   → skk-undo-kakutei-word-only のときの変換領域制御
 
 o skk-set-henkan-point-subr が明示的に呼び出されたときは
   一時的に skk-undo-kakutei-word-only を nil に設定し、
   確定されたら non-nil に戻す
 
この変更をすると、以下の副作用が出る。

 o C-g で消えるのが ▽ から point 移動前の位置までに限定される。
   逆に point が前方に移動されていてもその範囲が消される。
 
 o ▽モードで何か入力しようとすると強制的にpoint 移動前の位置に移動
   させられる。
 
結局のところ、簡単にやろうとすると
 
 o skk-undo-kakutei-word-only のときは特に変換領域を想定し、undo の
   整合性のために変換領域以外の変更を禁止し、変換領域内の編集も変換
   領域の最後尾に限定する。
 
という仕様にしなければならない...?

変換領域の設定を本格的に考えなおせば、変換領域内の編集は自由にする
こともできると思うが...
