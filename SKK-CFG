;;; -*-Emacs-Lisp-*-

;; SKK-CFG: installation setting about SKK.
;; Copyright (C) 1999 Mikio Nakajima <minakaji@osaka.email.ne.jp>

;; Author: Mikio Nakajima <minakaji@osaka.email.ne.jp>
;; Maintainer: Mikio Nakajima <minakaji@osaka.email.ne.jp>
;; Version: $Id: SKK-CFG,v 1.1 1999/09/15 04:40:57 minakaji Exp $
;; Last Modified: $Date: 1999/09/15 04:40:57 $

;;; Code:

(defvar default-load-path load-path)

(and (expand-file-name "../../site-lisp/apel" data-directory)
     (setq load-path (cons
		      (expand-file-name "../../site-lisp/apel" data-directory)
		      load-path )))

(if (and (boundp 'LISPDIR) LISPDIR)
    (progn
      (or (member LISPDIR default-load-path)
	  (setq default-load-path (cons LISPDIR default-load-path)) )
      (or (member LISPDIR load-path) (setq load-path (cons LISPDIR load-path)))
      (or (member (expand-file-name "apel" LISPDIR) load-path)
	  (setq load-path (cons (expand-file-name "apel" LISPDIR) load-path)) )))

(setq load-path (cons (expand-file-name ".") load-path))

(defvar VERSION_SPECIFIC_LISPDIR nil)
(if (and VERSION_SPECIFIC_LISPDIR
	 (null (member VERSION_SPECIFIC_LISPDIR load-path)) )
    (setq load-path (cons VERSION_SPECIFIC_LISPDIR load-path)) )

(require 'install)


;;; @ Please specify prefix of install directory.
;;;

;; Please specify install path prefix.
;; If it is omitted, shared directory (maybe /usr/local is used).
(defvar PREFIX install-prefix)
;;(setq PREFIX "~/")

;; Please specify prefix for ``skk'' [optional]
(setq SKK_PREFIX "skk")



;;; @ optional settings
;;;

(defvar VERSION_SPECIFIC_LISPDIR
  (install-detect-elisp-directory PREFIX nil 'version-specific))

;; It is generated by automatically. Please set variable `PREFIX'.
;; If you don't like default directory tree, please set it.
(defvar LISPDIR (install-detect-elisp-directory PREFIX))
;; (setq install-default-elisp-directory "~/lib/emacs/lisp")

(setq SKK_DIR (expand-file-name SKK_PREFIX LISPDIR))

(defvar PACKAGEDIR
  (if (boundp 'early-packages)
      (let ((dirs (append (if early-package-load-path
			      early-packages)
			  (if late-package-load-path
			      late-packages)
			  (if last-package-load-path
			      last-packages)))
	    dir)
	(while (not (file-exists-p (setq dir (car dirs))))
	  (setq dirs (cdr dirs)) )
	dir )))

;;; SKK-CFG ends here
