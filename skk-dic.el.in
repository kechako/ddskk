;;; skk-dic.el --- Default dictionary for SKK  -*- emacs-lisp -*-

;; Copyright (C) 2001 SKK Development Team

;; Maintainer: SKK Development Team <skk@ring.gr.jp>
;; Keywords: japanese, mule, input method

;; This file is part of Daredevil SKK.

;; Daredevil SKK is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or
;; (at your option) any later version.

;; Daredevil SKK is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with Daredevil SKK, see the file COPYING.  If not, write to
;; the Free Software Foundation Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:

;; This is the default dictionary, given in Emacs Lisp.
;; This file is automatically generated, at compile time, from SKK-JISYO.S.

;; The purpose of this built-in dictionary is to let everyone enjoy the
;; latest S dictionary, without effort.

;;; Code:

(eval-when-compile
  (require 'skk-macs)
  (require 'skk-vars))

;; Variables.

(defconst skk-small-dic
  "\
" "\
Small dictionary for SKK.")

(defconst skk-dic-buffer-name " *skk-small-dic*")

;; Functions.

;;;###autoload
(defun skk-search-small-dic ()
  (unless (string= "" skk-small-dic)
    (skk-search-jisyo-buf (skk-dic-setup-buffer)
			  10000)))

;;;###autoload
(defun skk-dic-setup-buffer ()
  (unless (string= "" skk-small-dic)
    (let ((buf (get-buffer-create skk-dic-buffer-name)))
      (with-current-buffer buf
	(when (zerop (buffer-size))
	  (unless (boundp 'skk-small-dic)
	    (load "skk-dic" t t))
	  (setq buffer-read-only nil)
	  (buffer-disable-undo)
	  (setq case-fold-search nil
		major-mode 'skk-jisyo-mode
		mode-name "SKK dic")
	  (insert skk-small-dic)
	  (skk-setup-jisyo-buffer)
	  (setq buffer-read-only t)
	  (set-buffer-modified-p nil)))
      ;;
      buf)))

(require 'product)
(product-provide
    (provide 'skk-dic)
  (require 'skk-version))

;;; skk-dic.el ends here
