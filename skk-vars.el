;;; skk-vars.el --- variables and constants commonly use
;;    in Daredevil SKK package programs.
;; Copyright (C) 1999, 2000, 2001 SKK Development Team <skk@ring.gr.jp>

;; Author: SKK Development Team <skk@ring.gr.jp>
;; Maintainer: SKK Development Team <skk@ring.gr.jp>
;; Version: $Id: skk-vars.el,v 1.76 2001/11/16 01:17:15 czkmt Exp $
;; Keywords: japanese
;; Last Modified: $Date: 2001/11/16 01:17:15 $

;; This file is part of Daredevil SKK.

;; Daredevil SKK is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either versions 2, or (at your option)
;; any later version.

;; Daredevil SKK is distributed in the hope that it will be useful
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with Daredevil SKK, see the file COPYING.  If not, write to the Free
;; Software Foundation Inc., 59 Temple Place - Suite 330, Boston,
;; MA 02111-1307, USA.

;;; Commentary:
;;

;;; Code:

;; APEL
(require 'path-util) ; for exec-installed-p.

(eval-when-compile

  ;; shut down compiler warnings.
  (defvar word-across-newline)
  (defvar emacs-beta-version)
  (defvar mule-version)

  (defalias-maybe 'frame-property 'ignore)
  (defalias-maybe 'locate-data-file 'ignore)

  (defmacro skk-deflocalvar (var default-value &optional documentation)
    (` (progn
	 (defvar (, var) (, default-value)
	   (, (format "%s\n\(buffer local\)" documentation)))
	 (make-variable-buffer-local '(, var)))))
  (require 'static))

(eval-and-compile
  (defconst skk-emacs-type
    (cond
     ((featurep 'xemacs)
      'xemacs)
     ((string< "5.0" mule-version)
      'mule5)
     ((string< "4.0" mule-version)
      'mule4)
     ((string< "3.0" mule-version)
      'mule3)
     ((string< "2.0" mule-version)
      'mule2)))
  ;;
  (require 'pcustom))

(defconst skk-ml-address "skk@ring.gr.jp")
(defconst skk-ml-command-address "skk-request@ring.gr.jp")
(defconst skk-background-mode
  ;; from font-lock-make-faces of font-lock.el  Welcome!
  (static-cond
   ((eq skk-emacs-type 'xemacs)
    (if (< (apply '+ (color-rgb-components
		      (face-property 'default 'background)))
	   (/ (apply '+ (color-rgb-components
			 (make-color-specifier "white"))) 3))
	'dark
      'light))
   (t
    (cond
     ((and window-system (x-display-color-p))
      (let ((bg-resource (x-get-resource ".backgroundMode"
					 "BackgroundMode"))
	    params)
	(if bg-resource
	    (intern (downcase bg-resource))
	  (setq params (frame-parameters))
	  (static-cond
	   ((and (eq system-type 'windows-nt)
		 (fboundp 'win32-color-values))
	    ;; Mule for Windows
	    (< (apply '+ (win32-color-values
			  (cdr (assq 'background-color params))))
	       (/ (apply '+ (win32-color-values "white")) 3))
	    'dark)
	   ((and (eq system-type 'windows-nt)
		 (not (fboundp 'x-color-values)))
	    (if (string-match "light"
			      (cdr (assq 'background-color params)))
		'light
	      'dark))
	   (t
	    (cond
	     ((cdr (assq 'background-mode params)));; Emacs20.x (Meadow)
	     ((< (apply '+ (x-color-values
			    (cdr (assq 'background-color params))))
		 (/ (apply '+ (x-color-values "white")) 3))
	      'dark)
	     (t 'light)))))))
     (t 'mono)))))

;;;; variables declaration
;;; user variables

(defgroup skk nil "Top of SKK customization group."
  :prefix "skk-"
  :group 'mule
  :group 'leim)

(defgroup skk-custom-by-function nil
  "SKK customization root grouping by function."
  :group 'skk)

(defgroup skk-custom-by-filename nil
  "SKK customization root grouping by filename."
  :group 'skk)

;;; by function
(defgroup skk-decoration nil "Decoration"
  :group 'skk-custom-by-function)

(defgroup skk-dictionary nil "Dictionary"
  :group 'skk-custom-by-function)

(defgroup skk-filenames nil "Filenames"
  :group 'skk-custom-by-function)

(defgroup skk-hooks-and-functions nil "Hooks and Funcalled functions"
  :group 'skk-custom-by-function)

(defgroup skk-keybinds nil "Keybinds"
  :group 'skk-custom-by-function)

(defgroup skk-okurigana nil "Okurigana processing"
  :group 'skk-custom-by-function)

(defgroup skk-misc nil "Miscellaneous"
  :group 'skk-custom-by-function)

;;; by filename
(defgroup skk-abbrev nil "SKK Abbrev mode related customization."
  :group 'skk-custom-by-filename)

(defgroup skk-auto nil "SKK auto okuri process related customization."
  :prefix "skk-"
  :group 'skk-custom-by-filename)

(defgroup skk-comp nil "SKK completion related customization."
  :prefix "skk-"
  :group 'skk-custom-by-filename)

(defgroup skk-cursor nil "SKK cursor related customization."
  :prefix "skk-cursor-"
  :group 'skk-custom-by-filename)

(defgroup skk-dcomp nil "SKK dynamic completion related customization."
  :prefix "skk-dcomp-"
  :group 'skk-custom-by-filename)

(defgroup skk-gadget nil "SKK gadget related customization."
  :prefix "skk-"
  :group 'skk-custom-by-filename)

(defgroup skk-isearch nil "SKK incremental search related customization."
  :prefix "skk-isearch-"
  :group 'skk-custom-by-filename)

(defgroup skk-jisx0201 nil "SKK jisx0201 (Hankaku Kana) related customization."
  :prefix "skk-jisx0201-"
  :group 'skk-custom-by-filename)

(defgroup skk-kakasi nil "SKK kakasi related customization."
  :prefix "skk-"
  :group 'skk-custom-by-filename)

(defgroup skk-kcode nil "SKK Kanji Code related customization."
  :prefix "skk-"
  :group 'skk-custom-by-filename)

(defgroup skk-look nil "SKK look conversion related customization."
  :prefix "skk-look-"
  :group 'skk-custom-by-filename)

(defgroup skk-lookup nil "SKK lookup related customization."
  :prefix "skk-lookup-"
  :group 'skk-custom-by-filename)

(defgroup skk-num nil "SKK number conversion related customization."
  :prefix "skk-num-"
  :group 'skk-custom-by-filename)

(defgroup skk-server nil "SKK server related customization."
  :prefix "skk-server-"
  :group 'skk-custom-by-filename)

(defgroup skk-tut nil "SKK tutorial conversion related customization."
  :prefix "skk-tut-"
  :group 'skk-custom-by-filename)

(defgroup skk-annotation nil "SKK annotation related customization."
  :prefix "skk-annotation-"
  :group 'skk-custom-by-filename)

;;(defgroup skk-viper nil "SKK/Viper related customization."
;;  :prefix "skk-viper-"
;;  :group 'skk-custom-by-filename)

(defcustom skk-init-file (convert-standard-filename "~/.skk")
  "*SKK の初期設定ファイル名。
このファイルの代わりに ~/.emacs で設定することも可能。"
  ;;"*Name of the SKK initialization file.
  ;;From skk.el 9.x on all customization may be done in ~/.emacs."
  :type '(choice file (const nil))
  :group 'skk-filenames)

(defcustom skk-special-midashi-char-list '(?> ?< ??)
  "*接頭辞、接尾辞の入力を指定する文字のリスト。"
  ;;  "*List of characters for entering prefixes and suffixes."
  :type '(repeat character)
  :group 'skk-keybinds)

(defcustom skk-mode-hook nil
  "*SKK を起動したときのフック。
他に、`skk-auto-fill-mode-hook', `skk-load-hook', `skk-init-file' でも
カスタマイズが可能。"
  ;; "*Hook run at SKK startup.  This hook is also run
  ;;in skk-auto-fill-mode after skk-auto-fill-mode-hook.
  ;;skk-auto-fill-mode-hook, skk-load-hook, skk-init-file may also be used
  ;;for customization."
  :type 'hook
  :group 'skk-hooks-and-functions)

(defcustom skk-auto-fill-mode-hook nil
  "*`skk-auto-fill-mode' を起動したときのフック。
他に、`skk-mode-hook', `skk-load-hook', `skk-init-file' でもカスタマイズが
可能。"
  ;;  "*Hook run at startup of skk-auto-fill-mode.
  ;;skk-mode-hook、skk-load-hook, skk-init-file may also be used for
  ;;customization."
  :type 'hook
  :group 'skk-hooks-and-functions)

(defcustom skk-load-hook nil
  "*skk.el をロードしたときのフック。
他に、`skk-mode-hook', `skk-auto-fill-mode-hook', `skk-init-file' でもカスタ
マイズが可能。"
  ;;  "*Hook run when SKK is loaded.
  ;;skk-auto-fill-mode-hook、skk-mode-hook, skk-init-file may also be used
  ;;for customization."
  :type 'hook
  :group 'skk-hooks-and-functions)

(defcustom skk-search-end-function nil
  "*単語検索終了時にコールされる関数。
この関数を利用して検索した単語の優先順位を変更するなどの作業が可能。
HENKAN-BUFFER, MIDASI, OKURIGANA, ENTRY の 4 引数を伴なってコールされる。
加工した ENTRY を返すこと。
この関数は、辞書バッファでコールされるので、変換を行ったバッファローカルな
情報を取り出したいときは、HENKAN-BUFFER を利用する。"
  :type '(choice function (const nil))
  :group 'skk-hooks-and-functions)

(defcustom skk-update-end-function nil
  "*個人辞書の更新終了時にコールされる関数。
HENKAN-BUFFER, MIDASI, OKURIGANA, WORD, PURGE の 5 引数を伴なってコールされる。
この関数は、辞書バッファでコールされるので、変換を行ったバッファローカルな
情報を取り出したいときは、HENKAN-BUFFER を利用する。
`skk-kakutei-initialize' がコールされる前にこの関数がコールされるので、最後の
確定に関するフラグ類は、この関数の中から参照することができる。"
  :type '(choice function (const nil))
  :group 'skk-hooks-and-functions)

(defcustom skk-kakutei-end-function nil
  "*確定時にコールされる関数。
KAKUTEI-WORD 引数を伴なって、変換を行ったバッファでコールされる。
skk-kakutei-initialize がコールされる前にこの関数がコールされるので、最後の確定
に関するフラグ類は、この関数の中から参照することができる。"
  :type '(choice function (const nil))
  :group 'skk-hooks-and-functions)

(defcustom skk-kakutei-jisyo nil
  "*最初に検索する辞書。
Non-nil で、かつ `skk-search-prog-list' の要素の中にこの変数が使用されて
いれば、指定された辞書を検索のためバッファに読み込み、検索を行う。
見出し語は、ソートされていなければならない。
各見出し語の最初のエントリしか検索しない (複数のエントリがあっても 2 番目以降の
エントリは無視される)。
`skk-search-prog-list' の値を設定することにより、検索対象の辞書の変更、検索の
順序の変更が可能。"
  ;;  "*The first dictionary to be searched.
  ;;If non-nil, and this variable is used as a component of
  ;;`skk-search-prog-list', the indicated dictionary is read into a
  ;;buffer and searched.
  ;;The keys must be sorted.
  ;;Only the first entry in each key is checked; if several entries are
  ;;present the second and following entries are ignored.
  ;;By setting the value of `skk-search-prog-list' the dictionaries
  ;;searched and the order of search can be changed."
  :type '(choice file (const nil))
  :group 'skk-filenames)

(defcustom skk-initial-search-jisyo nil
  "*ユーザー辞書の検索の前に検索する辞書。
見出し語は、ソートされていなければならない。
Non-nil で、かつ `skk-search-prog-list' の要素の中にこの変数が使用されて
いれば、指定された辞書を検索のためバッファに読み込み、検索を行う。
`skk-search-prog-list' の値を設定することにより、検索対象の辞書の変更、検索の
順序の変更が可能。"
  ;;  "*This dictionary is searched before the user's personal dictionary.
  ;;The keys must be sorted.
  ;;If non-nil, and this variable is used as a component of
  ;;`skk-search-prog-list', the indicated dictionary is read into a
  ;;buffer and searched.
  ;;By setting the value of `skk-search-prog-list' the dictionaries
  ;;searched and the order of search can be changed."
  :type '(choice file (const nil))
  :group 'skk-filenames)

(defcustom skk-large-jisyo nil
  "*ユーザー辞書の検索の後に検索する辞書。
見出し語は、ソートされていなければならない。
Non-nil で、かつ `skk-search-prog-list' の要素の中にこの変数が使用されて
いれば、指定された辞書を検索のためバッファに読み込み、検索を行う。
`skk-search-prog-list' の値を設定することにより、検索対象の辞書の変更、検索の
順序の変更が可能。"
  :type '(choice file (const nil))
  :group 'skk-filenames)

(defcustom skk-aux-large-jisyo nil
  "*SKK サーバーで最後に検索する辞書。
見出し語は、ソートされていなければならない。
Non-nil で、かつ `skk-search-prog-list' の要素の中にこの変数が使用されて
いれば、SKK サーバーを使い検索を行う。
SKK サーバーが active でなければ、指定された辞書をバッファに読み込む。
`skk-search-prog-list' の値を設定することにより、検索対象の辞書の変更、
検索の順序の変更が可能。
この値を設定することにより、skk-server.el が autoload される。"
  :type '(choice file (const nil))
  :group 'skk-filenames)

(defcustom skk-search-prog-list
  '((skk-search-kakutei-jisyo-file skk-kakutei-jisyo 10000 t)
    (skk-search-jisyo-file skk-initial-search-jisyo 10000 t)
    (skk-search-jisyo-file skk-jisyo 0 t)
    (skk-search-small-dic)
    (skk-okuri-search)
    (skk-search-jisyo-file skk-large-jisyo 10000)
    (skk-search-server skk-aux-large-jisyo 10000))
  "*検索関数、検索対象の辞書を決定するためのリスト。
変換した候補を返す S 式をリストの形に表記したもの。
`skk-search' 関数が `skk-search-prog-list' の car から後方向へ順番に S 式の
評価を行い変換を行う。"
  :type '(repeat
	  (list (function :tag "Search funcition")
		(choice :tag "Dictionary" file (const nil))
		(choice :tag "Minimum region size to be binary-searched"
			integer (const nil))
		(choice :tag "Quietly reading dictionary to Emacs buffer"
			(const t) (const nil))))
  :group 'skk-dictionary)

(defcustom skk-jisyo (convert-standard-filename "~/.skk-jisyo")
  "*SKK のユーザー辞書。"
  :type 'file
  :group 'skk-filenames)

(defcustom skk-backup-jisyo (convert-standard-filename "~/.skk-jisyo.BAK")
  "*SKK のユーザー辞書のバックアップファイル。"
  :type 'file
  :group 'skk-filenames)

(defcustom skk-jisyo-code nil
  "*Non-nil であれば、その値で辞書バッファの漢字コードを設定する。
Mule では、*euc-japan*, *sjis*, *junet*。
また、\"euc\", \"ujis\", \"sjis\", \"jis\" などの文字列によっても指定が可能。"
  :type '(choice symbol string)
  :group 'skk-dictionary)

(defcustom skk-keep-record t
  "*Non-nil であれば、変換に関する記録を `skk-record-file' に取る。
ただし数値であれば、`skk-record-file' をその行数より大きくしない。
nil であれば、変換に関する記録を取らない。"
  :type '(choice integer (const t) (const nil))
  :group 'skk-misc)

(defcustom skk-record-file (convert-standard-filename "~/.skk-record")
  "*ユーザー辞書の統計を取るファイル。
辞書セーブの時刻、単語の登録数、確定を行った回数、確定率、全体の語数の
情報を収める。"
  :type 'file
  :group 'skk-filenames)

(defcustom skk-kakutei-key "\C-j"
  "*漢字変換の確定動作を行うキー。"
  :type 'sexp
  :group 'skk-keybinds)

(defcustom skk-previous-candidate-char ?x
  "*skk-previous-candidate を割当てたキーキャラクタ。"
  :type 'character
  :group 'skk-keybinds)

(defcustom skk-try-completion-char ?\011 ; TAB
  "*見出し語の補完動作を行うキーキャラクタ。"
  :type 'character
  :group 'skk-keybinds)

(defcustom skk-next-completion-char ?.
  "*見出し語の補完動作で、次の候補を出力するキーキャラクタ。"
  :type 'character
  :group 'skk-keybinds)

(defcustom skk-previous-completion-char ?,
  "*見出し語の補完動作で、前の候補を出力するキーキャラクタ。"
  :type 'character
  :group 'skk-keybinds)

(defcustom skk-start-henkan-char ?\040	; SPC
  "*漢字変換を開始するキーキャラクタ。"
  :type 'character
  :group 'skk-keybinds)

(defcustom skk-start-henkan-with-completion-char ?\240 ; M-SPC
  "*見出し語を補完しながら▼モードに入るキーキャラクタ。"
  :type 'character
  :group 'skk-keybinds)

(defcustom skk-backward-and-set-henkan-point-char ?\321 ; M-Q
  "*ポイントを戻して▽モードに入るキーキャラクタ。"
  :type 'character
  :group 'skk-keybinds)

(defcustom skk-use-viper nil
  "*Non-nil であれば、VIPER に対応する。"
  :type 'boolean
  :group 'skk-viper)

(defcustom skk-henkan-okuri-strictly nil
  "*Non-nil であれば、見出し語と送り仮名が一致したときだけ候補として出力する。
例えば、下記のような辞書エントリが、`skk-jisyo' (プライベート辞書) にあった
場合に

  \"おおk /大/多/[く/多/]/[き/大/]/\"

\"▽おお*く\" を変換したとき、\"多く\" のみを出力し、\"大く\" を出力しない。

SKK-JISYO.[SML] の送り仮名エントリは上記の形式になっていないので、`skk-jisyo'
 の送りありの辞書エントリがこの形式のものをあまり含んでいない場合は、この
オプションを on にすることで、すぐに単語登録に入ってしまうので注意すること。

`skk-process-okuri-early' の値が nil ならば上記の形式で `skk-jisyo' が
作られる。

Emacs 19 以上ならば、下記の式を評価することで、単語登録に入ったときだけ
一時的にこのオプションを無効にすることができる。

    (add-hook 'minibuffer-setup-hook
              (function
               (lambda ()
                 (if (and (boundp 'skk-henkan-okuri-strictly)
                          skk-henkan-okuri-strictly
                          (not (eq last-command 'skk-purge-from-jisyo)))
                     (progn
                       (setq skk-henkan-okuri-strictly nil)
                       (put 'skk-henkan-okuri-strictly 'temporary-nil t))))))

    (add-hook 'minibuffer-exit-hook
              (function
               (lambda ()
                 (if (and (get 'skk-henkan-okuri-strictly 'temporary-nil)
                          (<= (minibuffer-depth) 1))
                     (progn
                       (put 'skk-henkan-okuri-strictly 'temporary-nil nil)
                       (setq skk-henkan-okuri-strictly t))))))

このオプション利用時は、`skk-process-okuri-early' の値は nil でなければ
ならない。"
  :type 'boolean
  :group 'skk-okurigana)

(defcustom skk-henkan-strict-okuri-precedence nil
  "*Non-nil であれば、見出し語と送り仮名が一致した候補を優先して表示する。
例えば、下記のような辞書エントリが、`skk-jisyo' (プライベート辞書) にあった
場合に

  \"おおk /大/多/[く/多/]/[き/大/]/\"

\"▽おお*く\" を変換したとき、まず\"多く\" を出力し、
次に \"大く\" を出力する。

\"大く\"などの候補はうっとうしいが、すぐに単語登録にはいってしまうのも
嫌なひとにおすすめ。

このオプション利用時は、`skk-process-okuri-early' の値は nil でなければ
ならない。
また `skk-henkan-okuri-strictly' が non-nil のときは、この変数は無視される。"
  :type 'boolean
  :group 'skk-okurigana)

(defcustom skk-auto-okuri-process nil
  "*Non-nil であれば、送り仮名部分を自動認識して変換を行う。
例えば、

    \"Uresii (\"UreSii\" ではなく) -> 嬉しい\"

のように変換される。但し、skk-jisyo 辞書 \(プライベート辞書\) が、

    \"うれs /嬉/[し/嬉/]/\"

のような形式になっていることが必要である (SKK-JISYO.[SML] はこの形式に対応し
ていないので、`skk-jisyo' にこのエントリがなければならない)。

このオプション利用時は、`skk-process-okuri-early' の値は nil でなければ
ならない。"
  :type 'boolean
  :group 'skk-okurigana)

(defcustom skk-process-okuri-early nil
  "*Non-nil であれば送り仮名のローマ字プレフィックス入力時点で変換を開始する。
例えば、

    \"UgoK -> ▼動k\"。

送り仮名が分らないまま変換していることになるので、`skk-jisyo' が送り仮名に
対応した形に成長しない。つまり

    \"うごk /動/\"

のような形態のままとなる。ただし、既に

    \"うごk /動/[く/動/]/[か/動/]/[け/動/]/[き/動/]/[こ/動/]/\"

のようなエントリが skk-jisyo にあれば、それを破壊しない。

nil であれば、送り仮名の入力が完了した時点で変換が開始する。例えば、

    \"UgoK -> ▽うご*k\", \"UgoKu -> ▼動く\"

このオプションを on にして skk-mode を起動すると、両立できないオプションである
`skk-kakutei-early', `skk-auto-okuri-process' および
`skk-henkan-okuri-strictly' は nil にセットされる。"
  :type 'boolean
  :group 'skk-okurigana)

(defcustom skk-egg-like-newline nil
  "*Non-nil であれば、▼モードで改行をタイプしても確定するのみで改行しない。"
  :type 'boolean
  :group 'skk-keybinds)

(defcustom skk-kakutei-early t
  "*Non-nil であれば `skk-insert' が呼ばれたときに現在の候補を確定する。
例えば、

    \"▽かくてい -> ▼確定 -> 確定s -> 確定す\"

のように変換後、「す」の prefix である \"s\" を入力した時点で確定する。
nil であれば、例えば

    \"▽かくてい -> ▼確定 -> ▼確定s -> ▼確定する -> 確定する。\"

のように `skk-kakutei' を直接、間接にコールするまで (句読点を入力したり、
新たな▽モードに入ったりすると間接的に `skk-kakutei をコールする) は、確定
しないので、その間は、変換候補を選びなおすことなどが可能。

このオプション利用時は、`skk-process-okuri-early' の値は nil でなければ
ならない。"
  :type 'boolean
  :group 'skk-keybinds)

(defcustom skk-delete-implies-kakutei t
  "*Non-nil であれば、▼モードで BS を押すと、前の一文字を削除し確定する。
nil であれば、一つ前の候補を表示する。"
  :type 'boolean
  :group 'skk-keybinds)

(defcustom skk-allow-spaces-newlines-and-tabs t
  "*Non-nil であれば、見出し語の中のスペース、タブを取り除いて変換できる。
例えば、下記のように 中に改行が入っていても変換が可能である。

     \"▽か
  な\"
   -> \"仮名\"

この値が nil であれば、最初のスペースで見出し語を切り詰めてしまい、以降のスペー
ス、タブ、改行は無視される。
この値は、`skk-start-henkan', `skk-latin-henkan', `skk-katakana-henkan',
`skk-hiragana-henkan', `skk-jisx0208-latin-henkan' 及び
`skk-backward-and-set-henkan-point' の動作に影響する。"
  :type 'boolean
  :group 'skk-misc)

(defcustom skk-delete-okuri-when-quit nil
  "*Non-nil であれば変換中の\\[keyboard-quit]で送り仮名を消して▽モードに入る。
例えば、

    \"▽な*く -> ▼泣く -> \\[keyboard-quit] ->▽な\"

nil であれば、送り仮名を含めた見出し語をそのまま残し、■モードに入る。例えば、

    \"▽な*く -> ▼泣く -> \\[keyboard-quit] -> なく\""
  :type 'boolean
  :group 'skk-keybinds)

(defcustom skk-check-okurigana-on-touroku nil
  "*Non-nil であれば、送りありの登録時に、余計な仮名をチェックする。

例えば、

     \"とびだ*す 飛び出\"

と登録するのが正しいにもかかわらず、ユーザが

     \"とびだ*す 飛び出す\"

でうっかり [RET] を押してしまったときに、最後の「す」が送り仮名であるかどうか
調べる。

この変数は以下の値をとり得る。

ask  -- ユーザに確認を求め、送り仮名と認められればこれを取り除いてから登録す
        る。
auto -- ユーザに確認を求めず、勝手に送り仮名を判断して削除してから登録する。
nil  -- 一切送り仮名のチェックをせず、全体を単語として登録する。これは SKK 本
        来の動作であり、従ってこの変数の既定値は nil である。"
  :type '(choice (const auto)
		 (const ask)
		 (const nil))
  :group 'skk-okurigana)

(defcustom skk-henkan-show-candidates-keys '(?a ?s ?d ?f ?j ?k ?l)
  "*メニュー形式で候補を選択するときの選択キーのリスト。
\"x\", \" \" 及び \"C-g\" 以外の 7 つのキー (char type) を含む必要があ
る。\"x\", \" \" 及び \"C-g\" は候補選択時にそれぞれ特別な仕事に割り当
てられているので、このリストの中には含めないこと。"
  :type '(repeat character)
  :group 'skk-keybinds)

(defcustom skk-status-indicator 'left
  "*SKK の状態をモード行のどこに表示するかを決める。
left であれば左端に表示する。
さもなければマイナーモードとしての表示法を取る。"
  :type '(choice (const minor-mode)
		 (const left)
		 symbol)
  :group 'skk-decoration)

(defcustom skk-latin-mode-string "SKK"
  "*SKK が latin (ascii) モードであるときにモードラインに表示される文字列。"
  :type 'string
  :group 'skk-decoration)

(defcustom skk-hiragana-mode-string "かな"
  "*ひらがなモードであるときにモードラインに表示される文字列。"
  :type 'string
  :group 'skk-decoration)

(defcustom skk-katakana-mode-string "カナ"
  "*カタカナモードであるときにモードラインに表示される文字列。"
  :type 'string
  :group 'skk-decoration)

(defcustom skk-jisx0208-latin-mode-string "全英"
  "*全英モードであるときにモードラインに表示される文字列。"
  :type 'string
  :group 'skk-decoration)

(defcustom skk-abbrev-mode-string "aあ"
  "*SKK abbrev モードであるときにモードラインに表示される文字列。"
  :type 'string
  :group 'skk-decoration)

(defcustom skk-indicator-use-cursor-color (and window-system
					       (fboundp 'x-display-color-p)
					       (x-display-color-p))
  "*Non-nil ならばカーソルと同じ色でインジケータを表示する"
  :type 'boolean
  :group 'skk-decoration)

(defcustom skk-echo t
  "*Non-nil であれば、仮名文字のプレフィックスを表示する。"
  :type 'boolean
  :group 'skk-decoration)

(defcustom skk-use-numeric-conversion t
  "*Non-nil であれば、数値変換を行う。"
  :type 'boolean
  :group 'skk-num)

(defcustom skk-rom-kana-base-rule-list
  '(("a" nil ("ア" . "あ"))
    ("bb" "b" ("ッ" . "っ"))
    ("ba" nil ("バ" . "ば"))
    ("be" nil ("ベ" . "べ"))
    ("bi" nil ("ビ" . "び"))
    ("bo" nil ("ボ" . "ぼ"))
    ("bu" nil ("ブ" . "ぶ"))
    ("bya" nil ("ビャ" . "びゃ"))
    ("bye" nil ("ビェ" . "びぇ"))
    ("byi" nil ("ビィ" . "びぃ"))
    ("byo" nil ("ビョ" . "びょ"))
    ("byu" nil ("ビュ" . "びゅ"))
    ("cc" "c" ("ッ" . "っ"))
    ("cha" nil ("チャ" . "ちゃ"))
    ("che" nil ("チェ" . "ちぇ"))
    ("chi" nil ("チ" . "ち"))
    ("cho" nil ("チョ" . "ちょ"))
    ("chu" nil ("チュ" . "ちゅ"))
    ("cya" nil ("チャ" . "ちゃ"))
    ("cye" nil ("チェ" . "ちぇ"))
    ("cyi" nil ("チィ" . "ちぃ"))
    ("cyo" nil ("チョ" . "ちょ"))
    ("cyu" nil ("チュ" . "ちゅ"))
    ("dd" "d" ("ッ" . "っ"))
    ("da" nil ("ダ" . "だ"))
    ("de" nil ("デ" . "で"))
    ("dha" nil ("デャ" . "でゃ"))
    ("dhe" nil ("デェ" . "でぇ"))
    ("dhi" nil ("ディ" . "でぃ"))
    ("dho" nil ("デョ" . "でょ"))
    ("dhu" nil ("デュ" . "でゅ"))
    ("di" nil ("ヂ" . "ぢ"))
    ("do" nil ("ド" . "ど"))
    ("du" nil ("ヅ" . "づ"))
    ("dya" nil ("ヂャ" . "ぢゃ"))
    ("dye" nil ("ヂェ" . "ぢぇ"))
    ("dyi" nil ("ヂィ" . "ぢぃ"))
    ("dyo" nil ("ヂョ" . "ぢょ"))
    ("dyu" nil ("ヂュ" . "ぢゅ"))
    ("e" nil ("エ" . "え"))
    ("ff" "f" ("ッ" . "っ"))
    ("fa" nil ("ファ" . "ふぁ"))
    ("fe" nil ("フェ" . "ふぇ"))
    ("fi" nil ("フィ" . "ふぃ"))
    ("fo" nil ("フォ" . "ふぉ"))
    ("fu" nil ("フ" . "ふ"))
    ("fya" nil ("フャ" . "ふゃ"))
    ("fye" nil ("フェ" . "ふぇ"))
    ("fyi" nil ("フィ" . "ふぃ"))
    ("fyo" nil ("フョ" . "ふょ"))
    ("fyu" nil ("フュ" . "ふゅ"))
    ("gg" "g" ("ッ" . "っ"))
    ("ga" nil ("ガ" . "が"))
    ("ge" nil ("ゲ" . "げ"))
    ("gi" nil ("ギ" . "ぎ"))
    ("go" nil ("ゴ" . "ご"))
    ("gu" nil ("グ" . "ぐ"))
    ("gya" nil ("ギャ" . "ぎゃ"))
    ("gye" nil ("ギェ" . "ぎぇ"))
    ("gyi" nil ("ギィ" . "ぎぃ"))
    ("gyo" nil ("ギョ" . "ぎょ"))
    ("gyu" nil ("ギュ" . "ぎゅ"))
    ;;("h" "" ("オ" . "お"))
    ("ha" nil ("ハ" . "は"))
    ("he" nil ("ヘ" . "へ"))
    ("hi" nil ("ヒ" . "ひ"))
    ("ho" nil ("ホ" . "ほ"))
    ("hu" nil ("フ" . "ふ"))
    ("hya" nil ("ヒャ" . "ひゃ"))
    ("hye" nil ("ヒェ" . "ひぇ"))
    ("hyi" nil ("ヒィ" . "ひぃ"))
    ("hyo" nil ("ヒョ" . "ひょ"))
    ("hyu" nil ("ヒュ" . "ひゅ"))
    ("i" nil ("イ" . "い"))
    ("jj" "j" ("ッ" . "っ"))
    ("ja" nil ("ジャ" . "じゃ"))
    ("je" nil ("ジェ" . "じぇ"))
    ("ji" nil ("ジ" . "じ"))
    ("jo" nil ("ジョ" . "じょ"))
    ("ju" nil ("ジュ" . "じゅ"))
    ("jya" nil ("ジャ" . "じゃ"))
    ("jye" nil ("ジェ" . "じぇ"))
    ("jyi" nil ("ジィ" . "じぃ"))
    ("jyo" nil ("ジョ" . "じょ"))
    ("jyu" nil ("ジュ" . "じゅ"))
    ("kk" "k" ("ッ" . "っ"))
    ("ka" nil ("カ" . "か"))
    ("ke" nil ("ケ" . "け"))
    ("ki" nil ("キ" . "き"))
    ("ko" nil ("コ" . "こ"))
    ("ku" nil ("ク" . "く"))
    ("kya" nil ("キャ" . "きゃ"))
    ("kye" nil ("キェ" . "きぇ"))
    ("kyi" nil ("キィ" . "きぃ"))
    ("kyo" nil ("キョ" . "きょ"))
    ("kyu" nil ("キュ" . "きゅ"))
    ("ma" nil ("マ" . "ま"))
    ("me" nil ("メ" . "め"))
    ("mi" nil ("ミ" . "み"))
    ("mo" nil ("モ" . "も"))
    ("mu" nil ("ム" . "む"))
    ("mya" nil ("ミャ" . "みゃ"))
    ("mye" nil ("ミェ" . "みぇ"))
    ("myi" nil ("ミィ" . "みぃ"))
    ("myo" nil ("ミョ" . "みょ"))
    ("myu" nil ("ミュ" . "みゅ"))
    ("n" nil ("ン" . "ん"))
    ("n'" nil ("ン" . "ん"))
    ("na" nil ("ナ" . "な"))
    ("ne" nil ("ネ" . "ね"))
    ("ni" nil ("ニ" . "に"))
    ("nn" nil ("ン" . "ん"))
    ("no" nil ("ノ" . "の"))
    ("nu" nil ("ヌ" . "ぬ"))
    ("nya" nil ("ニャ" . "にゃ"))
    ("nye" nil ("ニェ" . "にぇ"))
    ("nyi" nil ("ニィ" . "にぃ"))
    ("nyo" nil ("ニョ" . "にょ"))
    ("nyu" nil ("ニュ" . "にゅ"))
    ("o" nil ("オ" . "お"))
    ("pp" "p" ("ッ" . "っ"))
    ("pa" nil ("パ" . "ぱ"))
    ("pe" nil ("ペ" . "ぺ"))
    ("pi" nil ("ピ" . "ぴ"))
    ("po" nil ("ポ" . "ぽ"))
    ("pu" nil ("プ" . "ぷ"))
    ("pya" nil ("ピャ" . "ぴゃ"))
    ("pye" nil ("ピェ" . "ぴぇ"))
    ("pyi" nil ("ピィ" . "ぴぃ"))
    ("pyo" nil ("ピョ" . "ぴょ"))
    ("pyu" nil ("ピュ" . "ぴゅ"))
    ("rr" "r" ("ッ" . "っ"))
    ("ra" nil ("ラ" . "ら"))
    ("re" nil ("レ" . "れ"))
    ("ri" nil ("リ" . "り"))
    ("ro" nil ("ロ" . "ろ"))
    ("ru" nil ("ル" . "る"))
    ("rya" nil ("リャ" . "りゃ"))
    ("rye" nil ("リェ" . "りぇ"))
    ("ryi" nil ("リィ" . "りぃ"))
    ("ryo" nil ("リョ" . "りょ"))
    ("ryu" nil ("リュ" . "りゅ"))
    ("ss" "s" ("ッ" . "っ"))
    ("sa" nil ("サ" . "さ"))
    ("se" nil ("セ" . "せ"))
    ("sha" nil ("シャ" . "しゃ"))
    ("she" nil ("シェ" . "しぇ"))
    ("shi" nil ("シ" . "し"))
    ("sho" nil ("ショ" . "しょ"))
    ("shu" nil ("シュ" . "しゅ"))
    ("si" nil ("シ" . "し"))
    ("so" nil ("ソ" . "そ"))
    ("su" nil ("ス" . "す"))
    ("sya" nil ("シャ" . "しゃ"))
    ("sye" nil ("シェ" . "しぇ"))
    ("syi" nil ("シィ" . "しぃ"))
    ("syo" nil ("ショ" . "しょ"))
    ("syu" nil ("シュ" . "しゅ"))
    ("tt" "t" ("ッ" . "っ"))
    ("ta" nil ("タ" . "た"))
    ("te" nil ("テ" . "て"))
    ("tha" nil ("テァ" . "てぁ"))
    ("the" nil ("テェ" . "てぇ"))
    ("thi" nil ("ティ" . "てぃ"))
    ("tho" nil ("テョ" . "てょ"))
    ("thu" nil ("テュ" . "てゅ"))
    ("ti" nil ("チ" . "ち"))
    ("to" nil ("ト" . "と"))
    ("tsu" nil ("ツ" . "つ"))
    ("tu" nil ("ツ" . "つ"))
    ("tya" nil ("チャ" . "ちゃ"))
    ("tye" nil ("チェ" . "ちぇ"))
    ("tyi" nil ("チィ" . "ちぃ"))
    ("tyo" nil ("チョ" . "ちょ"))
    ("tyu" nil ("チュ" . "ちゅ"))
    ("u" nil ("ウ" . "う"))
    ("vv" "v" ("ッ" . "っ"))
    ("va" nil ("ヴァ" . "う゛ぁ"))
    ("ve" nil ("ヴェ" . "う゛ぇ"))
    ("vi" nil ("ヴィ" . "う゛ぃ"))
    ("vo" nil ("ヴォ" . "う゛ぉ"))
    ("vu" nil ("ヴ" . "う゛"))
    ("ww" "w" ("ッ" . "っ"))
    ("wa" nil ("ワ" . "わ"))
    ("we" nil ("ウェ" . "うぇ"))
    ("wi" nil ("ウィ" . "うぃ"))
    ("wo" nil ("ヲ" . "を"))
    ("wu" nil ("ウ" . "う"))
    ("xx" "x" ("ッ" . "っ"))
    ("xa" nil ("ァ" . "ぁ"))
    ("xe" nil ("ェ" . "ぇ"))
    ("xi" nil ("ィ" . "ぃ"))
    ("xka" nil ("ヵ" . "か"))
    ("xke" nil ("ヶ" . "け"))
    ("xo" nil ("ォ" . "ぉ"))
    ("xtsu" nil ("ッ" . "っ"))
    ("xtu" nil ("ッ" . "っ"))
    ("xu" nil ("ゥ" . "ぅ"))
    ("xwa" nil ("ヮ" . "ゎ"))
    ("xwe" nil ("ヱ" . "ゑ"))
    ("xwi" nil ("ヰ" . "ゐ"))
    ("xya" nil ("ャ" . "ゃ"))
    ("xyo" nil ("ョ" . "ょ"))
    ("xyu" nil ("ュ" . "ゅ"))
    ("yy" "y" ("ッ" . "っ"))
    ("ya" nil ("ヤ" . "や"))
    ("ye" nil ("イェ" . "いぇ"))
    ("yo" nil ("ヨ" . "よ"))
    ("yu" nil ("ユ" . "ゆ"))
    ("zz" "z" ("ッ" . "っ"))
    ("z," nil "‥")
    ("z-" nil "〜")
    ("z." nil "…")
    ("z/" nil "・")
    ("z[" nil "『")
    ("z]" nil "』")
    ("za" nil ("ザ" . "ざ"))
    ("ze" nil ("ゼ" . "ぜ"))
    ("zh" nil "←")
    ("zi" nil ("ジ" . "じ"))
    ("zj" nil "↓")
    ("zk" nil "↑")
    ("zl" nil "→")
    ("zo" nil ("ゾ" . "ぞ"))
    ("zu" nil ("ズ" . "ず"))
    ("zya" nil ("ジャ" . "じゃ"))
    ("zye" nil ("ジェ" . "じぇ"))
    ("zyi" nil ("ジィ" . "じぃ"))
    ("zyo" nil ("ジョ" . "じょ"))
    ("zyu" nil ("ジュ" . "じゅ"))
    ("." nil skk-current-kuten)
    ("," nil skk-current-touten)
    ("-" nil "ー")
    (":" nil "：")
    (";" nil "；")
    ("?" nil "？")
    ("[" nil "「")
    ("]" nil "」")
    ("l" nil skk-latin-mode)
    ("q" nil skk-toggle-kana)
    ("L" nil skk-jisx0208-latin-mode)
    ("Q" nil skk-set-henkan-point-subr)
    ("X" nil skk-purge-from-jisyo)
    ("/" nil skk-abbrev-mode)
    ("$" nil skk-display-code-for-char-at-point)
    ("@" nil skk-today)
    ("\\" nil skk-input-by-code-or-menu)
    (skk-kakutei-key nil skk-kakutei)
    ;; XXX
    ;;("\t" nil skk-insert)
    ;;("," nil skk-previous-candidate)
    ;;("\M-\040" nil skk-start-henkan-with-completion); M-SPC
    ;;("\M-\121" nil skk-backward-and-set-henkan-point); M-Q
    )
  ;; コンスタントにしてしまわないのは、ローマ字入力とは全く別の設定を
  ;; する人もいるからです。
  "*キー入力をいかに処理するかを表す、状態遷移規則のリスト。

リストの各要素は、それぞれが一つの規則であり、下記の形式を満たしていなければ
ならない。

 (INPUT-STATE NEXT-STATE OUTPUT)

SKK は INPUT-STATE を検出すると、OUTPUT をバッファに挿入し、続いて
NEXT-STATE に状態を移したうえで、入力待ち状態となる。

例えば、

     (\"a\" nil (\"ア\" . \"あ\"))
     (\"ki\" nil (\"キ\" . \"き\"))
     (\"tt\" \"t\" (\"ッ\" . \"っ\"))
     (\"nn\" nil (\"ン\" . \"ん\"))
     (\"n'\" nil (\"ン\" . \"ん\"))

上記の規則は、それぞれ、

     a  => あ
     ki => き
     tt => っt
     nn => ん
     n' => ん

このように状態が移り変わることを意味する。

INPUT-STATE および NEXT-STATE は、通常 US-ASCII 文字からなる文字列を用いる。
ただし、特別な場合には INPUT-STATE にそれ以外の文字列を指定することがある。

OUTPUT には、以下の 3つの形式を指定できる。

文字列 -- かなモード、カナモードとも、これが挿入される。
文字列と文字列のセル (ドットペア)
       -- かなモードにおいては CDR の、カナモードにおいては CAR の文字列が、
          それぞれ挿入される。
関数名シンボル
       -- 関数を実行する。もしその関数の返り値が文字列ならば、その文字列を
          挿入する。

同様の規則を表す変数に `skk-rom-kana-rule-list' がある。SKK は両方の規則を利
用するが、 `skk-rom-kana-rule-list' の方が優先される。従ってユーザが独自の規
則を設定したい場合には、`skk-rom-kana-rule-list' の方を使うのがよい。"
  :type '(repeat
	  (list :tag "Rule"
		(string :tag "1 Input State (string)")
		(choice :tag "2 Next State (choice)"
			string
			(const nil))
		(choice :tag "3 Output (choice)"
			(symbol :tag "Function")
			string
			(cons (string :tag "3-1 Katakana (string)")
			      (string :tag "3-2 Hiragana (string)")))))
  :group 'skk-keybinds)

(defcustom skk-rom-kana-rule-list
  '(;; ユーザーの好みで設定が分れそうな要素は、
    ;; skk-rom-kana-base-rule-list からこちらへ移しましょう...。
    ("hh" "h" ("ッ" . "っ"))
    ;; when you may want to insert 「がんま」by "gamma"...
    ("mm" "m" ("ン" . "ん")))
  "*状態遷移規則のリストで、ユーザの追加設定用の変数。

この変数は、`skk-rom-kana-base-rule-list' と同様の書式を満たす必要がある。

SKK は起動時にこの 2 変数を編集して `skk-rule-tree' を作成するが、
`skk-rom-kana-rule-list' の規則は `skk-rom-kana-base-rule-list' の規則よりも
優先される。

リストの各要素は、それぞれが一つの規則であり、下記の形式を満たしていなければ
ならない。

 (INPUT-STATE NEXT-STATE OUTPUT)

SKK は INPUT-STATE を検出すると、OUTPUT をバッファに挿入し、続いて
NEXT-STATE に状態を移したうえで、入力待ち状態となる。

詳しくは、`skk-rom-kana-base-rule-list' の説明を参照のこと。

ユーザは、追加したい規則を、例えば

    (setq skk-rom-kana-rule-list
      '(
	(\"hh\" \"h\" (\"ッ\" . \"っ\"))
	(\"@\" nil \"＠\")
	...
	))

上記のように `.emacs' または `skk-init-file' にて設定することができる。

この変数は標準では、

    (\"hh\" \"h\" (\"ッ\" . \"っ\"))

上記の設定がされている。この規則によると、

    ohhonn => おっほん
    ohhira => おっひら

のように挿入される。もしこれを

    ohhonn  => おおほん
    ohhira  => おおひら

のように変更したければ、

    (\"hh\" \"h\" (\"ッ\" . \"っ\"))

この設定を削除する。

また、`@' で `skk-today' (当日の日付の入力) を起動する代りに `＠' を入
力したい場合は、`skk-rom-kana-rule-list' に

    (\"@\" nil \"＠\")

という要素を加える。

もし、SKK を起動した後で `skk-rom-kana-rule-list' の変更を行った場合、その設
定を反映させるには \\[skk-restart] を実行する必要がある。"
  :type '(repeat
	  (list :tag "Rule"
		(string :tag "1 Input State (string)")
		(choice :tag "2 Next State (choice)"
			string
			(const nil))
		(choice :tag "3 Output (choice)"
			(symbol :tag "Function")
			string
			(cons (string :tag "3-1 Katakana (string)")
			      (string :tag "3-2 Hiragana (string)")))))
  :group 'skk-keybinds)

(defcustom skk-kana-input-search-function
  (function
   (lambda ()
     (save-match-data
       (and (string-match "^h\\([bcdfghjklmnpqrstvwxz]\\)$" skk-prefix)
	    (member (char-to-string (preceding-char)) '("お" "オ"))
	    (cons '("オ" . "お") (match-string 1 skk-prefix))))))
  "*ルールリストの中に記せない変換ルールを処理する関数。
`skk-rom-kana-base-rule-list' と `skk-rom-kana-rule-list' の要素を全て検索
した後にコールされる。引数はない。

 (現在の入力に対する出力 . \"続く unfixed prefix\")

というセルを返す。出力の種類については `skk-rom-kana-base-rule-list' を
参照のこと。

ディフォルトでは、\"お\" の後の \"h\" + 子音の入力を \"おお\" + 続く子
音処理用の unfixed prefix に変換している。"
  :type 'function
  :group 'skk-hooks-and-functions)

(defcustom skk-okuri-char-alist nil
  "*送り仮名 prefix を変換するルールを記述する連想リスト。
car に「実際のキー入力によるかな prefix 文字列」、cdr に「SKK の辞書が予
想しているかな prefix 文字列」を持つ cons cell のリスト。

この規則が使われるのは、`skk-process-okuri-early' が非 nil の場合のみである。

例えば、か行の送り仮名入力に \"c\" の prefix を使うのであれば、

  (setq skk-okuri-char-alist '((\"c\" . \"k\")))

のように書く。"
  :type '(repeat (cons string string))
  :group 'skk-okurigana)

(defcustom skk-downcase-alist nil
  "*変換キー (大文字ローマ字) の小文字への変換規則を表わす連想リスト。
変換キーの入力を開始する際、SKK では大文字で入力を行うので、
`skk-set-henkan-point' の中でこれを小文字に変換する作業を行う。この連想
リストに大文字 -> 小文字の変換ルールを書いておくことで、キー入力のカス
タマイズを行うことができる。この連想リストが空リストの場合は、単に
downcase される。"
  :type '(repeat (cons character character))
  :group 'skk-keybinds)

(defcustom skk-jisx0208-latin-vector
  [nil  nil  nil  nil  nil  nil  nil  nil
   nil  nil  nil  nil  nil  nil  nil  nil
   nil  nil  nil  nil  nil  nil  nil  nil
   nil  nil  nil  nil  nil  nil  nil  nil
   "　"  "！" "”" "＃" "＄" "％" "＆" "’"
   "（" "）" "＊" "＋" "，" "−" "．" "／"
   "０" "１" "２" "３" "４" "５" "６" "７"
   "８" "９" "：" "；" "＜" "＝" "＞" "？"
   "＠" "Ａ" "Ｂ" "Ｃ" "Ｄ" "Ｅ" "Ｆ" "Ｇ"
   "Ｈ" "Ｉ" "Ｊ" "Ｋ" "Ｌ" "Ｍ" "Ｎ" "Ｏ"
   "Ｐ" "Ｑ" "Ｒ" "Ｓ" "Ｔ" "Ｕ" "Ｖ" "Ｗ"
   "Ｘ" "Ｙ" "Ｚ" "［" "＼" "］" "＾" "＿"
   "‘" "ａ" "ｂ" "ｃ" "ｄ" "ｅ" "ｆ" "ｇ"
   "ｈ" "ｉ" "ｊ" "ｋ" "ｌ" "ｍ" "ｎ" "ｏ"
   "ｐ" "ｑ" "ｒ" "ｓ" "ｔ" "ｕ" "ｖ" "ｗ"
   "ｘ" "ｙ" "ｚ" "｛" "｜" "｝" "〜" nil]
  "*`skk-jisx0208-latin-insert' で参照される文字テーブル。
キーに対応する位置に文字列があれば、全英モードで該当のキーを押すことで、対応す
る文字が挿入される。
例えば、スペースキーに対応して、半角スペースを挿入させるように変更したければ、
skk.el のロード後 (もしくは `skk-load-hook' を利用して)、

     (aset skk-jisx0208-latin-vector 32 \" \")

とするか、もしくは、`skk-jisx0208-latin-vector' の 32 番目 (0 番から数えて)
 の値を \" \"とするような `skk-jisx0208-latin-vector' を直接書き、setq で
代入する。32 は、?  (半角スペースの char type) を評価したときの値。"
  :type 'sexp
  :group 'skk-keybinds)

(defcustom skk-use-face (or window-system
			    (fboundp 'selected-frame)
			    ; XEmacs does not have this.
			    (fboundp 'frame-face-alist)
			    (> emacs-major-version 20))
  "*Non-nil であれば、Emacs の face の機能を使用して変換表示を行う。"
  :type 'boolean
  :group 'skk-decoration)

;; should use defface?  however, can I use defface for highlight?
(defcustom skk-henkan-face 'skk-henkan-face-default
  "*変換候補の face 属性。`skk-use-face' が non-nil のときのみ有効。
Emacs 標準フェイスの default, modeline, region, secondary-selection,
highlight, underline, bold, italic, bold-italic の他、新たに face を作
り指定することも可能。
新たな face を作り指定するには `skk-make-face' を利用して、

      (skk-make-face 'DimGray/PeachPuff1)
      (setq skk-henkan-face 'DimGray/PeachPuff1)

のようにするのが手軽。foreground と background の色指定だけでない凝った face
を作る場合は、`skk-make-face' では対応できないので、Emacs の hilit19.el の
`hilit-lookup-face-create' などを利用する。色を付ける場合の配色は、canna.el の
`canna:attribute-alist' が良い例かもしれない。"
  :type 'face
  :group 'skk-decoration)

(defface skk-henkan-face-default
  '((((class color) (type tty))
     (:foreground "black" :background "green"))
    (((class color) (background light))
     (:foreground "black" :background "darkseagreen2"))
    (((class color) (background dark))
     (:foreground "white" :background "darkolivegreen"))
    (((class grayscale)) (:underline t)))
  "*標準の変換候補の face 属性。"
  :group 'skk-decoration)

(when (and skk-use-face
	   (not frame-background-mode)
	   (not (face-background 'skk-henkan-face-default)))
  (set-face-foreground 'skk-henkan-face-default "black")
  (set-face-background 'skk-henkan-face-default "darkseagreen2"))

;;; SKK-AUTO.EL related.
(defcustom skk-okuri-search-function 'skk-okuri-search-subr-original
  "*skk-okuri-search で使用する関数。"
  :type 'function
  :group 'skk-hooks-and-functions
  :group 'skk-auto)

(defcustom skk-auto-load-hook nil
  "*skk-auto.el をロードした後にコールされるフック。"
  :type 'hook
  :group 'skk-hooks-and-functions
  :group 'skk-auto)

;;; SKK-COMP.EL related.
(defcustom skk-dabbrev-like-completion nil
  "*Non-nil であれば、最後に補完された語について更に補完が行われる。
例えば、

  \"さ\" (,) -> \"さとう\" (,) -> \"さとうせんせい\"

nil であれば、先頭の文字を共通にする文字列について補完が行われる。
例えば、

  \"さ\" (,) -> \"さとう\" (,) -> \"さいとう\" (,) -> \"さくら\""
  :type 'boolean
  :group 'skk-comp)

(defcustom skk-comp-load-hook nil
  "*skk-comp.el をロードした後にコールされるフック。"
  :type 'hook
  :group 'skk-hooks-and-functions
  :group 'skk-comp)

(defcustom skk-kakutei-history-limit 100
  "変数 `skk-kakutei-history' の値 (連想リスト) の長さの上限。"
  :type 'integer
  :group 'skk-misc
  :group 'skk-comp)

(defcustom skk-use-color-cursor (and window-system
				     (fboundp 'x-display-color-p)
				     (x-display-color-p))
  "*Non-nil であれば、SKK モードの入力モードに応じてカーソルに色を付ける。"
  :type 'boolean
  :group 'skk-decoration
  :group 'skk-cursor)

(defcustom skk-auto-insert-paren nil
  "*Non-nil であれば、括弧と閉括弧をまとめて挿入する。
例えば、\"「\" を入力したときに \"」\" を自動的に挿入し、両かぎかっこの間に
カーソルを移動する。
挿入する文字列は、`skk-auto-paren-string-alist' で指定する。"
  :type 'boolean
  :group 'skk-keybinds)

(defcustom skk-auto-paren-string-alist
  '(("「" . "」") ("『" . "』") ("(" . ")") ("（" . "）")
    ("{" . "}")("｛" . "｝") ("〈" . "〉") ("《" . "》")
    ("[" . "]") ("［" . "］") ("〔" . "〕") ("【" . "】")
    ("\"" . "\"")("“" . "”") ("`" . "'")
    ;;("<" . ">") ;; skk-special-midashi-char-list の中にある文字。
  )
  "*自動的に対になる文字列を入力するための連想リスト。
`skk-auto-insert-paren' が non-nil の場合、car の文字列が挿入されたとき
に cdr の文字列を自動的に挿入され、カーソルはその 2 つの文字列の間に移
動する。
`skk-special-midashi-char-list' の要素になっている文字は、
`skk-auto-paren-string-alist' に含めても削除される。 "
  :type '(repeat (cons string string))
  :group 'skk-keybinds)

(defcustom skk-japanese-message-and-error nil
  "*Non-nil であれば、SKK のメッセージとエラーを日本語で表示する。
nil であれば、英語で表示する。"
  :type 'boolean
  :group 'skk-decoration)

(defcustom skk-set-henkan-point-key
  '(?A ?B ?C ?D ?E ?F ?G ?H ?I ?J ?K ?M ?N ?O ?P ?R ?S ?T ?U ?V ?W ?Y ?Z)
  "*変換の開始地点を決めるキーのリスト。"
  :type '(repeat character)
  :group 'skk-keybinds)

(defcustom skk-emacs-id-file (convert-standard-filename "~/.skk-emacs-id") "\
*`skk-jisyo-file'に最近アクセスした SKK の `skk-emacs-id' を保存するファイル。"
  :type 'file
  :group 'skk-filenames)

(defcustom skk-share-private-jisyo nil "\
*Non-nil であれば、複数の SKK による個人辞書の共有を考慮して辞書を更新する。"
  :type 'boolean
  :group 'skk-dictionary)

(defcustom skk-jisyo-save-count 50
  "*数値であれば、その回数辞書が更新されたときに辞書を自動的にセーブする。
nil であれば、辞書のオートセーブを行わない。"
  :type '(choice integer (const nil))
  :group 'skk-dictionary)

(defcustom skk-byte-compile-init-file nil
  "*Non-nil であれば、skk-mode 起動時に skk-init-file をバイトコンパイルする。
正確に言うと、

  (1)skk-init-file をバイトコンパイルしたファイルがないか、
  (2)skk-init-file とそのバイトコンパイル済ファイルを比較して、前者の方が新し
     いとき

に skk-init-file をバイトコンパイルする。
nil であれば、skk-init-file とそのバイトコンパイル済みファイルを比較して
skk-init-file の方が新しいときは、そのバイトコンパイル済ファイルを消す。"
  :type 'boolean
  :group 'skk-misc)

(defcustom skk-count-private-jisyo-candidates-exactly nil
  "*Non-nil であれば、Emacs を終了するときに正確に個人辞書の候補数を数える。
nil であれば、1 行に複数の候補があっても 1 候補として数える。
計算結果は、`skk-record-file' に保存される。"
  :type 'boolean
  :group 'skk-dictionary)

(defcustom skk-compare-jisyo-size-when-saving t
  "*Non-nil であれば、`skk-jisyo' のセーブ時にファイルサイズのチェックを行う。
前回セーブした `skk-jisyo' と今回セーブしようとする辞書とのサイズ比較を行い、
後者の方が大きいときにユーザーにセーブを続けるかどうかの確認を求める。"
  :type 'boolean
  :group 'skk-dictionary)

(defcustom skk-auto-start-henkan t
  "*単語や文節の区切りを示す文字の打鍵により自動的に変換を開始する。
`skk-auto-start-henkan-keyword-list' により単語や文節の区切りを示す文字を
指定する。"
  :type 'boolean
  :group 'skk-keybinds)

(defcustom skk-auto-start-henkan-keyword-list
  '("を" "、" "。" "．" "，" "？" "」" "！" "；" "：" ")" ";" ":"
    "）" "”" "】" "』" "》" "〉" "｝" "］" "〕" "}" "]" "?" "."
    "," "!")
  ;; あまりキーワードが多くなると、通常の変換を困難にする？
  "*自動変換を開始するキーワード。
`skk-auto-start-henkan' が non-nil のとき、このリストの要素の文字を挿入
すると、SPC を押すことなく自動的に変換を開始する。"
  :type '(repeat string)
  :group 'skk-keybinds)

(defcustom skk-search-excluding-word-pattern-function nil
  "*個人辞書に取り込まない文字列のパターンを検索する関数を指定する。
確定した文字列を引数に渡して `funcall' される。

SKK では変換、確定を行った文字列は全て個人辞書に取り込まれるが、この
変数で指定された関数が non-nil を返すとその文字列は個人辞書に取り込ま
れない。

例えば、この変数に下記のような指定すると、変換により (SKK abbrev mode
での変換を除く) カタカナのみからなる文字列を得て確定しても、それを個人
辞書に取り込まない。

  (setq skk-search-excluding-word-pattern-function
        (function
         (lambda (kakutei-word)
         ;; この関数が t を返したときは、その文字列は個人辞書に取り込まれない。
           (save-match-data
             (and
              ;; 送りなし変換で、
              (not skk-okuri-char)
              ;; 確定語がカタカナのみから構成されていて、
              (string-match \"^[ーァ-ン]+$\" kakutei-word)
              ;; SKK abbrev mode 以外での変換か、
              (or (not skk-abbrev-mode)
                ;; 見出し語がカタカナ、ひらがな以外のとき。
                ;; (後で▽マークを付けたときは、見出し語が英文字でも、
                ;; skk-abbrev-modeが t になっていない)。
                  (not (string-match \"^[^ーァ-ンぁ-ん]+$\"
				      skk-henkan-key))))))))

カタカナを変換により求めたいが、個人辞書にはカタカナのみの候補を取り込みた
くない、など、個人辞書が必要以上に膨れるのを抑える目的に使用できる。

なお、個人辞書に取り込まない見出し語については補完が効かないので注意すること。"
  :type 'function
  :group 'skk-hooks-and-functions)

(defcustom skk-update-jisyo-function 'skk-update-jisyo-original
  "*skk-update-jisyo で使用する関数。"
  :type 'function
  :group 'skk-hooks-and-functions)

(defcustom skk-save-jisyo-function 'skk-save-jisyo-original
  "*skk-save-jisyo で使用する関数。"
  :type 'function
  :group 'skk-hooks-and-functions)

(defcustom skk-count-jisyo-candidates-function
  'skk-count-jisyo-candidates-original
  "*skk-count-jisyo-candidates で使用する関数。"
  :type 'function
  :group 'skk-hooks-and-functions)

(defcustom skk-public-jisyo-to-be-searched-function
  'skk-public-jisyo-to-be-searched-original
  "*skk-public-jisyo-has-entry-p で使用する関数。"
  :type 'function
  :group 'skk-hooks-and-functions)

(defcustom skk-use-look nil
  "*Non-nil であれば、UNIX look コマンドを利用した補完・変換を行う。
SKK abbrev モードで補完を行うと、個人辞書を検索し尽した後で、UNIX look コマン
ドによる英単語補完を行う。例えば、

  ▽abstr (TAB)
  ---> ▽abstract

SKK abbrev モードで、「英文字 + アスタリスク」にて変換を行うと、look コマンド
によるあいまい検索を行うことができる。例えば、

 ▽abstra* (SPC)
  ---> ▼abstract

この状態で確定すると、`abstra*' を見出し語、`abstract' を候補とするエントリ
が個人辞書に追加される。`skk-search-excluding-word-pattern-function' によ
り、確定してもこのようなエントリを追加しないように設定することができる。"
  :type 'boolean
  :group 'skk-look)

(defcustom skk-henkan-overlay-priority 600
  "*変換した候補に重ねる overlay の priority。
例えば、Viper で R コマンドにより replace を行うときに、
`viper-replace-overlay' という priority 400 の overlay を重ねられるが、
`skk-henkan-overlay-priority' のディフォルト値はこの overlay より
priority が高いので、優先して表示される。"
  :type 'integer
  :group 'skk-decoration)

(defcustom skk-kuten-touten-alist '((jp . ("。" . "、")) (en . ("．" . "，")))
  "*句点と読点の連想リスト。
各要素の形式は、

   (シンボル . (句点を表わす文字列 . 読点を表わす文字列))

という cons cell。シンボルの部分は、`jp' もしくは `en' とし、
`skk-toggle-kutouten' はこれをトグルで切り換える。
ディフォルトの句読点のタイプは、`skk-kutouten-type' で指定する。"
  :type '(repeat (cons (choice (const jp) (const en))
		       (cons string string)))
  :group 'skk-keybinds)

(defcustom skk-kutouten-type 'jp
  "*標準の句読点のタイプ。`jp' もしくは `en' というシンボル。
バッファローカル値。"
  :type '(choice (const jp) (const en))
  :group 'skk-keybinds)
(make-variable-buffer-local 'skk-kutouten-type)

(defcustom skk-read-from-minibuffer-function nil "\
*単語登録モードで `read-from-minibuffer' の INITIAL-CONTENTS を提供する関数。
この function は文字列を返さなければならない。
例えば、skk-henkan-key をそのまま initial-contents として利用したいときは、

  (setq skk-read-from-minibuffer-function
        (function (lambda () skk-henkan-key)))

と指定する。"
  :type 'function
  :group 'skk-hooks-and-functions)

(defcustom skk-use-jisx0201-input-method nil "\
*Non-nil なら 半角カナと Japanese Roman の入力機能が利用可能になる。"
  :type 'boolean
  :group 'skk-jisx0201)

(defcustom skk-use-kana-keyboard nil "\
*Non-nil なら仮名入力用の設定をロードする。
SKK 使用中にこの変数の値を切り替えることで  ローマ字入力 ←→ 仮名入力 の
切り替えができる。"
  :type 'boolean
  :group 'skk-keybinds)

(defcustom skk-undo-kakutei-word-only nil
  "*Non-nil であれば ▽モードと▼モード時のアンドゥ情報を記録しない。"
  :type 'boolean
  :group 'skk-misc)

(defvar skk-latin-mode-map nil
  "*ASCII モードのキーマップ。")
(defvar skk-j-mode-map nil
  "*かなモードのキーマップ。")
(defvar skk-jisx0208-latin-mode-map nil
  "*全角モードのキーマップ。")
(defvar skk-abbrev-mode-map nil
  "*SKK abbrev モードのキーマップ。")

(defvar skk-menu-items
  ;; SKK メニューの定義。
  '("SKK"
    ("Convert Region and Echo"
     ("Gyakubiki"
      ["to Hiragana" skk-gyakubiki-message skk-use-kakasi]
      ["to Hiragana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end)
	   (interactive "r")
	   (skk-gyakubiki-message start end 'all-candidates))))
       skk-use-kakasi]
      ["to Katakana" skk-gyakubiki-katakana-message skk-use-kakasi]
      ["to Katakana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end)
	   (interactive "r")
	   (skk-gyakubiki-katakana-message
	    start end 'all-candidates))))
       skk-use-kakasi])
     ("Hurigana"
      ["to Hiragana" skk-hurigana-message skk-use-kakasi]
      ["to Hiragana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end)
	   (interactive "r")
	   (skk-hurigana-message start end 'all-candidates))))
       skk-use-kakasi]
      ["to Katakana" skk-hurigana-katakana-message skk-use-kakasi]
      ["to Katakana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end)
	   (interactive "r")
	   (skk-hurigana-katakana-message
	    start end 'all-candidates))))
       skk-use-kakasi]))
    ("Convert Region and Replace"
     ["Ascii" skk-latin-region skk-use-kakasi]
     ("Gyakubiki"
      ["to Hiragana" skk-gyakubiki-region skk-use-kakasi]
      ["to Hiragana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end)
	   (interactive "r")
	   (skk-gyakubiki-region start end 'all-candidates))))
       skk-use-kakasi]
      ["to Katakana" skk-gyakubiki-katakana-region skk-use-kakasi]
      ["to Katakana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end)
	   (interactive "r")
	   (skk-gyakubiki-katakana-region
	    start end 'all-candidates))))
       skk-use-kakasi])
     ["Hiragana" skk-hiragana-region skk-use-kakasi]
     ("Hurigana"
      ["to Hiragana" skk-hurigana-region skk-use-kakasi]
      ["to Hiragana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end)
	   (interactive "r")
	   (skk-hurigana-region start end 'all-candidates))))
       skk-use-kakasi]
      ["to Katakana" skk-hurigana-katakana-region skk-use-kakasi]
      ["to Katakana, All Candidates"
       (call-interactively
	(function
	 (lambda (start end) (interactive "r")
	   (skk-hurigana-katakana-region
	    start end 'all-candidates))))
       skk-use-kakasi])
     ["Katakana" skk-katakana-region skk-use-kakasi]
     ["Romaji" skk-romaji-region skk-use-kakasi]
     ["Zenkaku" skk-jisx0208-latin-region skk-use-kakasi])
    ["Count Jisyo Candidates" skk-count-jisyo-candidates t]
    ["Save Jisyo" skk-save-jisyo t]
    ["Undo Kakutei" skk-undo-kakutei t]
    ["Version" skk-version t])
  "Menu used in SKK mode.")

;;; SKK-CURSOR.EL related.
(defcustom skk-cursor-default-color
  (cond
   ((eq skk-emacs-type 'xemacs)
    (frame-property (selected-frame) 'cursor-color))
   (t
    (cdr (assq 'cursor-color (frame-parameters (selected-frame))))))
  "*SKK モードのオフを示すカーソル色。
`skk-use-color-cursor' が non-nil のときに使用される。"
  :group 'skk-decoration
  :group 'skk-cursor)

(defcustom skk-cursor-hiragana-color (if (eq skk-background-mode 'light)
					 "coral4"
				       "pink")
  "*かなモードを示すカーソル色。
`skk-use-color-cursor' が non-nil のときに使用される。"
  :type 'string
  :group 'skk-decoration
  :group 'skk-cursor)

(defcustom skk-cursor-katakana-color (if (eq skk-background-mode 'light)
					 "forestgreen"
				       "green")
  "*カタカナモードを示すカーソル色。
`skk-use-color-cursor' が non-nil のときに使用される。"
  :type 'string
  :group 'skk-decoration
  :group 'skk-cursor)

(defcustom skk-cursor-jisx0201-color (if (eq skk-background-mode 'light)
					 "blueviolet"
				       "thistle")
  "*JISX0201 モードを示すカーソル色。
`skk-use-color-cursor' が non-nil のときに使用される。"
  :type 'string
  :group 'skk-decoration
  :group 'skk-cursor)

(defcustom skk-cursor-jisx0208-latin-color "gold"
  "*全角英字モードを示すカーソル色。
`skk-use-color-cursor' が non-nil のときに使用される。"
  :type 'string
  :group 'skk-decoration
  :group 'skk-cursor)

(defcustom skk-cursor-latin-color (if (eq skk-background-mode 'light)
				      "ivory4"
				    "gray")
  "*アスキーモードを示すカーソル色。
`skk-use-color-cursor' が non-nil のときに使用される。"
  :type 'string
  :group 'skk-decoration
  :group 'skk-cursor)

(defcustom skk-cursor-abbrev-color "royalblue"
  "*abbrev モードを示すカーソル色。
`skk-use-color-cursor' が non-nil のときに使用される。"
  :type 'string
  :group 'skk-decoration
  :group 'skk-cursor)

;;; SKK-GADGET.EL related.
(defcustom skk-gengo-alist
  '((heisei "平成" "H") (showa "昭和" "S") (taisho "大正" "T")
    (meiji "明治" "M"))
  "*元号を表記した文字列の alist。
car は元号をローマ字表記した symbol。
cdr は元号表記の string からなるリスト。"
  :type '(repeat (choice symbol string))
  :group 'skk-gadget)

(defcustom skk-month-alist
  '(("Jan" "1" "Januar") ("Feb" "2" "Februar") ("Mar" "3" "M,Adrz")
    ("Apr" "4" "April") ("May" "5" "Mai")
    ("Jun" "6" "Juni") ("Jul" "7" "Juli") ("Aug" "8" "August")
    ("Sep" "9" "September") ("Oct" "10" "Oktober")
    ("Nov" "11" "November") ("Dec" "12" "Dezember"))
  "*月名の英語表記とその他の表記法の連想リスト。
各 cons cell の car は Emacs の標準関数 `current-time-string' が返す形式。
cdr は対応する任意の形式。"
  :type '(repeat (repeat string))
  :group 'skk-gadget)

(defcustom skk-day-of-week-alist
  '(("Sun" "日" "So") ("Mon" "月" "Mo") ("Tue" "火" "Di") ("Wed" "水" "Mi")
    ("Thu" "木" "Do") ("Fri" "金" "Fr") ("Sat" "土" "Sa"))
  "*曜日の英語表記とその他の名の表記法の連想リスト。
各 cons cell の car は Emacs の標準関数 `current-time-string' が返す形式。
cdr は対応する任意の形式。"
  :type '(repeat (repeat string))
  :group 'skk-gadget)

(defcustom skk-default-current-date-function
  (function
   (lambda (date-information format gengo and-time)
     (skk-default-current-date date-information nil 0 gengo 0 0 0 and-time)))
  "*`skk-current-date' でコールされるディフォルトの関数。
時間情報を引数に取り加工した文字列を出力する。

引数は DATE-INFORMATION, FORMAT, GENGO, AND-TIME の 4 つ。
DATE-INFORMATION は `current-time-string' が返した文字列を

  (year month day day-of-week hour minute second)

の形式で変換したリスト (各要素は文字列)。
FORMAT は `format' の第一引数の様式による出力形態を指定する文字列。
GENGO は元号表示するかどうか (boolean)。
AND-TIME は時刻も表示するかどうか (boolean)。"
  :type '(choice function (const nil))
  :group 'skk-gadget)

(defcustom skk-date-ad nil
  "*Non-nil であれば、`skk-today', `skk-clock' で西暦表示する。
nil であれば、元号表示する。"
  :type 'boolean
  :group 'skk-gadget)

(defcustom skk-number-style 1
  "*`skk-today', `skk-clock' で表示する数字の形式を変化させる。
半角表: nil もしくは 0.
全角表示: t もしくは、1.
漢数字表: t, 0, 1 以外の non-nil 値。"
  :type '(choice (choice :tag "Hankaku" (const nil) (integer 0))
		 (choice :tag "Zenkaku" (const t) (integer 1))
		 (integer :tag "Kansuuji" 3))
  :group 'skk-gadget)

(defcustom skk-units-alist
  '(("mile" ("km" . 1.6093) ("yard" . 1760))
    ("yard" ("feet" . 3) ("cm" . 91.44))
    ("feet" ("inch" . 12) ("cm" . 30.48))
    ("inch" ("feet" . 0.5) ("cm" . 2.54)))
  "*単位換算情報の連想リスト。
各要素は (基準となる単位 (変換する単位 . 変換時の倍率)) の形式による。
`skk-gadget-units-conversion' で参照する。"
  :type 'sexp
  :group 'skk-gadget)

(defcustom skk-gadget-load-hook nil
  "*skk-gadget.el をロードした後にコールされるフック。"
  :type 'hook
  :group 'skk-hooks-and-functions
  :group 'skk-gadget)

;;; SKK-ISEARCH.EL related.
(defcustom skk-isearch-mode-string-alist
  '((hiragana . "[か] ") (katakana . "[カ] ") (jisx0208-latin . "[英] ")
    (latin . "[aa] ") (abbrev . "[aあ] ") (nil . "[--] "))
  ;;  "*Alist of \(MODE-SYMBOL . PROMPT-STRING\).
  ;;MODE-SYMBOL is a symbol indicates canonical mode of skk for skk-isearch.
  ;;Valid MODE-SYMBOL is one of `hiragana', `katakana', `jisx0208-latin',
  ;;`latin' or nil.
  ;;PROMPT-STRING is a string used in prompt to indicates current mode of
  ;;skk for skk-isearch. "
  "*isearch 時に入力モードに従い出すプロンプト指定のための連想リスト。
各要素は、

  (MODE-SYMBOL . PROMPT-STRING)

という cons cell。
MODE-SYMBOL は入力モードを表わすシンボルで、
下記のいずれかを指定する。

   かなモード： `hiragana'
   カナモード： `katakana'
   全英モード： `jisx0208-latin'
   アスキーモード： `latin'

nil は、SKK モードオフを表わす。
PROMPT-STRING は、該当の SKK モードに対し出すプロンプトの文字列。"
  :type '(repeat
	  (cons (symbol :tag "Mode Name")
		(string :tag "Prompt for this mode")))
  :group 'skk-decoration
  :group 'skk-isearch)

(defcustom skk-isearch-start-mode nil
  ;;  "*Specifies the search mode when isearch is called.
  ;;This variable is valid only when `skk-isearch-use-previous-mode' is nil.
  ;;If nil, it means that if skk-mode has been called in this buffer, same as
  ;;the mode of the buffer, otherwise perform ascii search.
  ;;If `latin' or `ascii' perfrom ascii search.
  ;;If `hiragana', `hirakana' or `kana' -> hira kana search.
  ;;If `jisx0208-latin' or `eiji', perform zenkaku eiji (i.e. JIS X0208
  ;;alphabet) search."
  "*カレントバッファで isearch を行う際の入力モード。
`skk-isearch-use-previous-mode' が nil の場合のみ有効。
isearch を行う場合、常にこの変数で指定した入力モードが使用される (ユーザーが
明示的に変更を行うことは可)。
下記のいずれかのシンボルで指定する。

   nil:  カレントバッファで SKK モードが起動されていればそのモード、
         起動されていなければ アスキーモード。
   `hiragana' (`hiragana' or `kana'): かなモード
   `jisx0208-latin' (`eiji') : 全英モード
   `latin' (`ascii'): アスキーモード"
  :type '(choice (const :tag "Succeed an input mode of current buffer" nil)
		 (const :tag "Ascii search" latin)
		 (const :tag "Hiragana search" hiragana)
		 (const :tag "JISX0208 alphabet search" jisx0208-latin))
  :group 'skk-isearch)

(defcustom skk-isearch-use-previous-mode nil
  ;; "*Non-nil means use the same search mode as that of the last search."
  "*Non-nil であれば、同じバッファでの最後の検索時のモードを使用する。"
  :type 'boolean
  :group 'skk-isearch)

(defcustom skk-isearch-initial-mode-when-skk-mode-disabled 'latin
  ;;  "*Symbol indicates the mode to use as initial mode for skk-isearch when
  ;;skk is turned off in the current buffer."
  "*SKK モードがオフのバッファで、最初に isearch を行う際の入力モード。"
  :type '(choice (const :tag "Ascii search" latin)
		 (const :tag "Hiragana search" hiragana)
		 (const :tag "JISX0208 alphabet search" jisx0208-latin))
  :group 'skk-isearch)

(defcustom skk-isearch-whitespace-regexp "\\(\\s \\|[ \t\n\r\f]\\)*"
  ;;  "*Regular expression to match a sequence of whitespace chars.
  ;;This applies to regular expression incremental search."
  "空白文字の連続としてマッチさせるべき正規表現。
regexp isearch の際、この正規表現にマッチする文字が検索文字列の間に含まれていて
もマッチする。"
  :type 'regexp
  :group 'skk-isearch)

;;; SKK-JISX0201.EL related.
(defcustom skk-jisx0201-mode-string " jisx0201"
  "*SKK が JISX0201 モードであるときにモードラインに表示される文字列。"
  :type 'string
  :group 'skk-hooks-and-functions
  :group 'skk-jisx0201)

;;; SKK-KAKASI.EL related.
(defcustom skk-use-kakasi (exec-installed-p "kakasi")
  "*Non-nil であれば KAKASI を使った変換を行う。"
  :type 'boolean
  :group 'skk-kakasi)

(defcustom skk-kakasi-command (exec-installed-p "kakasi")
  "*KAKASI コマンド本体。"
  :type 'file
  :group 'skk-filenames
  :group 'skk-kakasi)

(defcustom skk-romaji-*-by-hepburn t
  "*Non-nil であれば KAKASI を使ったローマ字への変換様式にヘボン式を用いる。
例えば、
  \"し\" -> \"shi\"

nil であれば、訓令式 \"(「日本式」とも言うようだ)\" を用いる。
例えば、
   \"し\" -> \"si\"

昭和 29 年 12 月 9 日付内閣告示第一号によれば、原則的に訓令式 \"(日本式)\" を
用いるかのように記載されているが、今日一般的な記載方法は、むしろ、ヘボン式であ
るように思う。"
  :type 'boolean
  :group 'skk-kakasi)

(defcustom skk-kakasi-load-hook nil
  "*skk-kakasi.el がロードされたときのフック。"
  :type 'hook
  :group 'skk-hooks-and-functions
  :group 'skk-kakasi)

(defcustom skk-gyakubiki-jisyo-list nil
  "KAKASI を使った変換の際に参照する逆引き辞書のリスト。
nil なら KAKASI コマンドは標準の辞書を参照する。"
  :type '(repeat file)
  :group 'skk-kakasi)

;;; SKK-KCODE.EL related.
(defcustom skk-input-by-code-menu-keys1 '(?a ?s ?d ?f ?g ?h ?q ?w ?e ?r ?t ?y)
  "*メニュー形式で JIS 文字を入力するときに使用する選択キーのリスト。
第 1 段階のメニューで使用する。
12 個のキー (char type) を含む必要がある。"
  :type '(repeat character)
  :group 'skk-keybinds
  :group 'skk-kcode)

(defcustom skk-input-by-code-menu-keys2
  '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?q ?w ?e ?r ?t ?y ?u)
  "*メニュー形式で JIS 文字を入力するときに使用する選択キーのリスト。
第 2 段階のメニューで使用する。
16 個のキー (char type) を含む必要がある。"
  :type '(repeat character)
  :group 'skk-keybinds
  :group 'skk-kcode)

(defcustom skk-kcode-charset
  (cond ((featurep 'jisx0213) 'japanese-jisx0213-1)
	((memq skk-emacs-type '(xemacs mule5 mule4 mule3))
	 'japanese-jisx0208)
	(t lc-jp))
  "*skk-input-by-code-or-menu で使われる文字セット。"
  :type 'symbol
  :group 'skk-kcode)

(defcustom skk-kcode-load-hook nil
  "*skk-kcode.el をロードした後にコールされるフック。"
  :type 'hook
  :group 'skk-hooks-and-functions
  :group 'skk-kcode)

;;; SKK-LOOK.EL related.
(defcustom skk-look-command (exec-installed-p "look")
  "*UNIX look コマンドの名前。"
  :type 'file
  :group 'skk-filenames
  :group 'skk-look)

(defcustom skk-look-ignore-case t
  "*Non-nil であれば、大文字・小文字を区別しないで検索を行う。
look コマンドにオプション \"-f\" を渡す。"
  :type 'boolean
  :group 'skk-look)

(defcustom skk-look-dictionary-order t
  "*Non-nil であれば、辞書順にソートされた検索ファイルを使用する。
look コマンドにオプション \"-d\" を渡す。"
  :type 'boolean
  :group 'skk-look)

(defcustom skk-look-use-alternate-dictionary nil
  "*Non-nil であれば、/usr/dict/web2 を使い検索を行う。
ディフォルトの辞書は、/usr/dict/words。
look コマンドにオプション \"-a\" を渡す。"
  :type '(choice file (const nil))
  :group 'skk-look)

(defcustom skk-look-termination-character nil
  "*UNIX look コマンドオプションの終端文字列。
look コマンドにオプション \"-t\" とその文字列を渡す。
nil であればこのオプションは使用されない。"
  :type '(choice string (const nil))
  :group 'skk-look)

(defcustom skk-look-dictionary nil
  "*look コマンドが検索する辞書ファイル。
nil であれば、/usr/dict/words を使用する。"
  :type '(choice file (const nil))
  :group 'skk-filenames
  :group 'skk-look)

(defcustom skk-look-recursive-search nil "\
*Non-nil であれば、look コマンドが見つけた英単語を変換キーにし、再検索を行う。
再検索の結果、候補が見つからなければ、元の英単語自身を候補として出力する。"
  :type 'boolean
  :group 'skk-look)

(defcustom skk-look-expanded-word-only t
  "\
*Non-nil ならば look の出力に対する再検索が成功した候補のみを表示する。
`skk-look-recursive-search' が non-nil であるときのみ有効。"
  :type 'boolean
  :group 'skk-look)

(defcustom skk-look-use-ispell (and (exec-installed-p "ispell")
				    (module-installed-p 'ispell))
  "*Non-nil であれば、look による検索の際、ispell を併用する。"
  :type 'boolean
  :group 'skk-look)

;;; SKK-NUM.EL related.
(defcustom skk-num-type-alist
  '((0 . identity)
    (1 . skk-num-jisx0208-latin)
    (2 . skk-num-type2-kanji)
    (3 . skk-num-type3-kanji)
    (4 . skk-num-recompute)
    (5 . skk-num-type5-kanji)
    (9 . skk-num-shogi))
  "*数値の変換のための、インデクスと変換に使用する関数との連想リスト。
各要素は、`(インデクス . 関数名)' という構成になっている。
インデクスには、例えば見出し語が \"平成#1年\" のとき、`#' 記号の直後に表示
される integer `1' を代入する。

インデクスと関数の関係 (ディフォルト値) は下記の通り。
    0 -> 無変換
    1 -> 全角数字へ変換
    2 -> 漢数字へ変換 (位取りなし)
    3 -> 漢数字へ変換 (位取りをする)
    4 -> その数字そのものをキーにして辞書を再検索
    5 -> 漢数字 (手形などで使用する文字を使用) へ変換 (位取りをする)
    9 -> 将棋で使用する数字 (\"３四\" など) に変換"
  :type '(repeat (cons (choice :tag "Index"
			       (integer 0) (integer 1) (integer 2) (integer 3)
			       (integer 4) (integer 5) (integer 9))
		  (function :tag "Function")))
  :group 'skk-num)

(defcustom skk-num-convert-float nil
  "*Non-nil であれば、浮動小数点数を使った見出し語に対応して変換を行う。
この値を non-nil にすることで、\"#.# /#1．#1/#0月#0日/\" などの辞書見出しが使用
できなくなるので、注意。"
  :type 'boolean
  :group 'skk-num)

(defcustom skk-num-uniq (or (assq 4 skk-num-type-alist)
			    (and (assq 2 skk-num-type-alist)
				 (or (assq 3 skk-num-type-alist)
				     (assq 5 skk-num-type-alist)))) "\
*Non-nil であれば、異なる数値表現でも変換結果が同じ数値を重複して出力しない。"
  :type 'boolean
  :group 'skk-num)

(defcustom skk-num-load-hook nil
  "*skk-num.el をロードした後にコールされるフック。"
  :type 'hook
  :group 'skk-hooks-and-functions
  :group 'skk-num)

;;; SKK-SERVER.EL related.
(defcustom skk-server-host (or (getenv "SKKSERVER") "localhost")
  "*SKK 辞書サーバーを走らせているホスト名。"
  :type '(choice (string :tag "Name of the Host")
		 (const nil))
  :group 'skk-server)

(defcustom skk-server-prog (getenv "SKKSERV")
  "*SKK 辞書サーバープログラム名。フルパスで書く。"
  :type '(choice (file :tag "File Name of the Program")
		 (const nil))
  :group 'skk-filenames
  :group 'skk-server)

(defcustom skk-server-jisyo (getenv "SKK_JISYO")
  "*SKK 辞書サーバープログラムに渡す辞書名。フルパスで書く。"
  :type '(choice (file :tag "File Name of the Dictionary")
		 (const nil))
  :group 'skk-filenames
  :group 'skk-server)

(defcustom skk-server-portnum (if (eq system-type 'windows-nt) 1178)
  "*Non-nil であれば、その値を port number として skkserv と TCP 接続する。
/etc/services を直接書き換える権限がないユーザーのための変数。
Windows ではディフォルト値として 1178 が設定される。"
  :type '(choice integer (const nil)))

;;(defvar skk-server-debug nil
;;  "*Non-nil であれば、辞書サーバープログラムをディバッグモードで起動する。
;;ディバッグ・モードで skkserv を走らせると、そのまま foreground で走り、
;;メッセージを出力する。キーボードから割りこみをかけることもできる。")

(defcustom skk-servers-list nil
  "*辞書サーバー毎の情報リスト。

複数のホストで動いているサーバにアクセスできる場合には、以下のようにリストの
各要素に順にホスト名、フルパスでの SKK サーバー名、SKK サーバーに渡す辞書名、
SKK サーバーが使用するポート番号を書き、設定をすることができる。

   (setq skk-servers-list
         '((\"host1\" \"/path/to/skkserv\" \"/path/to/SKK-JISYO.L\" 1178)
           (\"host2\" \"/path/to/skkserv\")))

この場合、最初に指定したサーバにアクセスできなくなると、自動的に順次リストにあ
る残りのサーバにアクセスするようになる。
サーバーのディフォルトの辞書およびポート番号を使用する場合は nil を指定するか、
何も書かないで良い。

なお、ユーザー自身に実行権限のないサーバーを指定する場合は、

   (setq skk-servers-list '((\"host1\") (\"host2\")))

のように、ホスト名だけを書くことができる。上記の設定例では、host1, host2 にお
ける skkserv サービスの TCP 接続の開始のみ試み、サーバーの起動は試みない。"
  :type '(repeat
	  (list (string :tag "Hostname")
		(choice :tag "Server" file (const nil))
		(choice :tag "Dictionary" file (const nil))
		(choice :tag "Port number" integer (const nil))))
  :group 'skk-server)

(defcustom skk-server-report-response nil
  "*Non-nil であれば、サーバの応答状況を報告する。
具体的には、変換時サーバーの送出する文字を受け取るまでに
`accept-process-output' を何回実行したかを報告する。"
  :type 'boolean
  :group 'skk-server)

(defcustom skk-server-remote-shell-program
  (or (getenv "REMOTESHELL")
      (and (boundp 'remote-shell-program)
	   (symbol-value 'remote-shell-program))
      (cond
       ((eq system-type 'berkeley-unix)
	(if (file-exists-p "/usr/ucb/rsh")
	    "/usr/ucb/rsh"
	  "/usr/bin/rsh"))
       ((eq system-type 'usg-unix-v)
	(if (file-exists-p "/usr/ucb/remsh")
	    "/usr/ucb/remsh"
	  "/bin/rsh"))
       ((eq system-type 'hpux)
	"/usr/bin/remsh")
       ((eq system-type 'EWS-UX/V)
	"/usr/ucb/remsh")
       ((eq system-type 'pcux)
	"/usr/bin/rcmd")
       (t
	"rsh")))
  "*リモートシェルのプログラム名。"
  :type 'file
  :group 'skk-filenames
  :group 'skk-server)

(defcustom skk-server-load-hook nil
  "*skk-server.el をロードした後にコールされるフック。"
  :type 'hook
  :group 'skk-hooks-and-functions
  :group 'skk-server)

(defcustom skk-jisx0213-prohibit nil
  "*Non-nil であれば JISX0213 の文字列を含む候補の出力をしない。
Mule-UCS がインストールされていないときはこの値は動作に影響しない。"
  :type 'boolean
  :group 'skk-misc)

;;; SKK-TUT.EL related.
(defcustom skk-tut-file
  (cond ((eq skk-emacs-type 'xemacs)
	 (locate-data-file "SKK.tut"))
	(t
	 "/usr/local/share/skk/SKK.tut"))
  "*SKK チュートリアルのファイル名。
The English version is SKK.tut.E."
  :type 'file
  :group 'skk-filenames
  :group 'skk-tut)

(defvar skk-tut-file-alist
  (` (("Japanese" . (, skk-tut-file))
      ("English" . (, (concat skk-tut-file ".E")))))
  "*Alist of `(LANGUAGE . TUTORIAL-FILE)' pairs.")

(defcustom skk-tut-use-face skk-use-face
  "*Non-nil であれば、チュートリアルで face を利用した表示を行う。"
  :type 'boolean
  :group 'skk-decoration
  :group 'skk-tut)

(defface skk-tut-section-face
  '((((class color) (background light))
     (:foreground "yellow" :background "dodgerblue"))
    (((class color) (background dark))
     (:foreground "yellow" :background "slateblue"))
    (((class grayscale)) (:bold t) (:italic t)))
  "*チュートリアル中のセクションの表示部分の face。"
  :group 'skk-decoration
  :group 'skk-tut)

(defface skk-tut-do-it-face
  '((((class color) (background light)) (:foreground "DarkGoldenrod"))
    (((class color) (background dark)) (:foreground "LightGoldenrod"))
    (((class grayscale)) (:bold t)))
  "*チュートリアル中の指示項目の表示部分の face。"
  :group 'skk-decoration
  :group 'skk-tut)

(defface skk-tut-question-face
  '((((class color) (background light)) (:foreground "Blue"))
    (((class color) (background dark)) (:foreground "LightSkyBlue"))
    (((class grayscale)) (:underline t)))
  "*チュートリアル中の問題の表示部分の face。"
  :group 'skk-decoration
  :group 'skk-tut)

(defface skk-tut-key-bind-face
  '((((class color) (background light)) (:foreground "Firebrick"))
    (((class color) (background dark)) (:foreground "OrangeRed"))
    (((class grayscale)) (:bold t)))
  "*チュートリアル中のキーバインドの表示部分の face。"
  :group 'skk-decoration
  :group 'skk-tut)

(defface skk-tut-hint-face
  '((((class color) (background light)) (:foreground "CadetBlue"))
    (((class color) (background dark)) (:foreground "Aquamarine"))
    (((class grayscale)) (:italic t)))
  "*チュートリアル中のヒントの表示部分の face。
現在のところ、SKK.tut.E でしか使用されていない。"
  :group 'skk-decoration
  :group 'skk-tut)

;;; -- INTERNAL CONSTANTS AND VARIABLES of SKK.EL
;; (ones of other separate programs should be in the relative files.)
;; ---- global ones.
;;(defvar skk-henkan-face 'skk-henkan-face)
(defconst skk-coding-system-alist
  (cond ((featurep 'jisx0213)
	 '(("euc" . euc-jisx0213)
	   ("ujis" . euc-jisx0213)
	   ("sjis". shift_jisx0213)
	   ("jis" . iso-2022-jp-3-strict)))
	((memq skk-emacs-type '(xemacs mule5 mule4 mule3))
	 '(("euc" . euc-japan)
	   ("ujis" . euc-japan)
	   ("sjis". shift_jis)
	   ("jis" . junet)))
	(t
	 '(("euc" . *euc-japan*)
	   ("ujis" . *euc-japan*)
	   ("sjis". *sjis*)
	   ("jis" . *junet*))))
  "coding-system の文字列表現と、シンボル表現の連想リスト。")

(defconst skk-kana-rom-vector
  ["x" "a" "x" "i" "x" "u" "x" "e" "x" "o" "k" "g" "k" "g" "k" "g"
   "k" "g" "k" "g" "s" "z" "s" "j" "s" "z" "s" "z" "s" "z" "t" "d"
   "t" "d" "t" "t" "d" "t" "d" "t" "d" "n" "n" "n" "n" "n" "h" "b"
   "p" "h" "b" "p" "h" "b" "p" "h" "b" "p" "h" "b" "p" "m" "m" "m"
   "m" "m" "x" "y" "x" "y" "x" "y" "r" "r" "r" "r" "r" "x" "w" "x"
   "x" "w" "n"]
  "*かな文字からローマ字への変換ルール。
下記の該当するかな文字をその文字のローマ字プレフィックスで現わしたもの。
    ぁ  あ  ぃ  い  ぅ  う  ぇ  え  ぉ  お  か  が  き  ぎ  く  ぐ
    け  げ  こ  ご  さ  ざ  し  じ  す  ず  せ  ぜ  そ  ぞ  た  だ
    ち  ぢ  っ  つ  づ  て  で  と  ど  な  に  ぬ  ね  の  は  ば
    ぱ  ひ  び  ぴ  ふ  ぶ  ぷ  へ  べ  ぺ  ほ  ぼ  ぽ  ま  み  む
    め  も  ゃ  や  ゅ  ゆ  ょ  よ  ら  り  る  れ  ろ  ゎ  わ  ゐ
    ゑ  を  ん"
  ;; (length skk-kana-rom-vector)
  ;; --> 83
  ;; (setq kana '("ぁ" "あ" "ぃ" "い" "ぅ" "う" "ぇ" "え" "ぉ" "お"
  ;;		  "か" "が" "き" "ぎ" "く" "ぐ" "け" "げ" "こ" "ご"
  ;;	          "さ" "ざ" "し" "じ" "す" "ず" "せ" "ぜ" "そ" "ぞ"
  ;;	          "た" "だ" "ち" "ぢ" "っ" "つ" "づ" "て" "で" "と" "ど"
  ;;		  "な" "に" "ぬ" "ね" "の" "は" "ば" "ぱ" "ひ" "び" "ぴ"
  ;;		  "ふ" "ぶ" "ぷ" "へ" "べ" "ぺ" "ほ" "ぼ" "ぽ"
  ;;		  "ま" "み" "む" "め" "も" "ゃ" "や" "ゅ" "ゆ" "ょ" "よ"
  ;;	          "ら" "り" "る" "れ" "ろ" "ゎ" "わ" "ゐ" "ゑ" "を" "ん"))
  ;; (length kana)
  ;; --> 83
  ;; (mapcar (lambda (s) (- (char-octet (string-to-char s) 1) 33))
  ;;	kana)
  ;; --> (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\
  ;;      26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\
  ;;      49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\
  ;;      72 73 74 75 76 77 78 79 80 81 82)
  )

(defconst skk-default-jisx0208-latin-vector
  ;; note that skk-jisx0208-latin-vector is a user variable.
  ;; skk.el ロード前に .emacs などで、skk-jisx0208-latin-vector の別の値をユー
  ;; ザーが直接書いたり、skk.el ロード後にこの値を aset で直接いじったりしな
  ;; ければ default-value で skk-jisx0208-latin-vector にアクセスすることで
  ;; skk-default-jisx0208-latin-vector の値を保持することもできようが、それは
  ;; 望めない...。
  [nil  nil  nil  nil  nil  nil  nil  nil
   nil  nil  nil  nil  nil  nil  nil  nil
   nil  nil  nil  nil  nil  nil  nil  nil
   nil  nil  nil  nil  nil  nil  nil  nil
   "　"  "！" "”" "＃" "＄" "％" "＆" "’"
   "（" "）" "＊" "＋" "，" "−" "．" "／"
   "０" "１" "２" "３" "４" "５" "６" "７"
   "８" "９" "：" "；" "＜" "＝" "＞" "？"
   "＠" "Ａ" "Ｂ" "Ｃ" "Ｄ" "Ｅ" "Ｆ" "Ｇ"
   "Ｈ" "Ｉ" "Ｊ" "Ｋ" "Ｌ" "Ｍ" "Ｎ" "Ｏ"
   "Ｐ" "Ｑ" "Ｒ" "Ｓ" "Ｔ" "Ｕ" "Ｖ" "Ｗ"
   "Ｘ" "Ｙ" "Ｚ" "［" "＼" "］" "＾" "＿"
   "‘" "ａ" "ｂ" "ｃ" "ｄ" "ｅ" "ｆ" "ｇ"
   "ｈ" "ｉ" "ｊ" "ｋ" "ｌ" "ｍ" "ｎ" "ｏ"
   "ｐ" "ｑ" "ｒ" "ｓ" "ｔ" "ｕ" "ｖ" "ｗ"
   "ｘ" "ｙ" "ｚ" "｛" "｜" "｝" "〜" nil]
  "skk-jisx0208-latin-region で参照する文字テーブル。
\"ascii\" -> \"ａｓｃｉｉ\" のような全角文字への変換を行う際に利用する。")

(defconst skk-kanji-len (length "あ")
  "漢字一文字の長さ。Mule[1-3] では 3 になる。Mule4, XEmacs では 1。")

(defconst skk-hankaku-alist
  (when (eq skk-emacs-type 'mule2)
    '((161 . 32)	; ?\
      (170 . 33)	;?\!
      (201 . 34)	;?\"
      (244 . 35)	;?\#
      (240 . 36)	;?\$
      (243 . 37)	;?\%
      (245 . 38)	;?\&
      (199 . 39)	;?\'
      (202 . 40)	;?\(
      (203 . 41)	;?\)
      (246 . 42)	;?\*
      (220 . 43)	;?\+
      (164 . 44)	;?\,
      (221 . 45)	;?\-
      (165 . 46)	;?\.
      (191 . 47)	;?\/
      (167 . 58)	;?\:
      (168 . 59)	;?\;
      (227 . 60)	;?\<
      (225 . 61)	;?\=
      (228 . 62)	;?\>
      (169 . 63)	;?\?
      (247 . 64)	;?\@
      (206 . 91)	;?\[
      (239 . 92)	;?\\
      (207 . 93)	;?\]
      (176 . 94)	;?^
      (178 . 95)	;?\_
      (208 . 123)	;?\{
      (195 . 124)	;?\|
      (209 . 125)	;?\}
      (177 . 126)	;?\~
      (198 . 96)))	;?`
  "文字コードの 2 番目のバイトと対応する ascii 文字 (char) との連想リスト。
Mule 2 を使用する場合に `skk-latin-region' で参照する。
Mule-2.3 添付の egg.el よりコピーした。")

(defconst skk-kana-cleanup-command-list
  '(skk-undo
    skk-kakutei
    skk-delete-backward-char
    skk-insert
    skk-previous-candidate))

(defconst skk-quote-char-alist
  '((?\; . "\\073")
    (?/ . "\\057")
    (?\n . "\\n")
    (?\r . "\\r")
    (?\" . "\\\"")
    (?\\  . "\\\\"))
  "辞書エントリ内に含めてはならない文字を置き変えるための連想リスト。
`;' は、註釈と関係ない場合だけ置換する。")

(defvar skk-emacs-id nil
  "複数 emacs を識別する文字列。
ユーザー辞書を複数の emacs 上で起動されている SKK で共有するときに参照する。")

(defvar skk-jisyo-update-vector nil
  "長さが skk-jisyo-save-count のベクトル。
辞書バッファ更新の記録を保存し、辞書バッファを辞書ファイルにセーブするときに、
他の SKK が辞書ファイルに最近アクセスしているときには、辞書ファイルをバッファ
に読み込んでから、skk-jisyo-update-vector を用いてバッファを更新し、その
結果をファイルにセーブする。")

(defvar skk-rule-tree nil
  "ローマ字 -> かな変換の状態遷移規則を表すツリーの初期状態。
最初に skk-mode を起動したときに skk-rom-kana-base-rule-list と
skk-rom-kana-rule-list から木の形にコンパイルされる。
\\[skk-restart] によっても再コンパイルされる。")

(defvar skk-insert-new-word-function nil
  "候補を挿入したときに funcall される関数を保存する変数。")

(defvar skk-isearch-message nil
  "skk-isearch 関数をコールするためのフラグ。
Non-nil であれば、`skk-isearch-message' 関数をコールする。")

(defvar skk-mode-invoked nil
  "Non-nil であれば、Emacs を起動後既に `skk-mode' を起動したことを示す。")

(defvar skk-kakutei-count 0
  "変換候補を確定したカウントを保持する変数。
`skk-record-file' の \"確定:\" 項目のカウンター。")

(defvar skk-touroku-count 0
  "辞書登録したカウントを保持する変数。
`skk-record-file' の \"登録:\" 項目のカウンター。")

(defvar skk-update-jisyo-count 0
  "辞書を更新した回数。
このカウンターの数字が `skk-jisyo-save-count' 以上となったときにユーザー辞書の
オートセーブが行われる。
辞書のセーブが行われるとイニシャライズされる。")

(defvar skk-kakutei-history nil
  "送りなしで確定された見出し語・候補の履歴。

   (\"みだしご\" . \"見出し語\")

   という形式の連想リスト。")

(defvar skk-minibuffer-origin-mode nil
  "入力モードを表わすシンボル。
有効な値は、`hiragana', `katakana', `abbrev', `latin', `jisx0208-latin'
もしくは nil のいずれか。")

(defvar skk-menu nil)

(skk-deflocalvar skk-modeline-input-mode nil)
(defvar skk-indicator-alist nil)

;; ---- buffer local variables

;; <フラグ類>

;;(skk-deflocalvar skk-current-henkan-data
;;  '(;; global variables

;;    ;; バッファローカル変数のディフォルト値を設定すると、これを直接書換えした
;;    ;; ときに他のバッファから見える値も変わってしまう。global なフラグはこれ
;;    ;; を利用してディフォルト値を与えておく。

;;    ;; Emacs を起動後既に skk-mode を起動したことを示す
;;    (invoked . nil)

;;    ;; skk-isearch 関数をコールするためのフラグ
;;    (isearch-message . nil)

;;    ;; 変換候補を確定したカウントを保持する変数
;;    (kakutei-count . 0)

;;    ;;入力モードを表わすシンボル
;;    (minibuffer-origin-mode . nil)

;;    ;; 辞書登録したカウントを保持する変数
;;    (touroku-count . 0)

;;    ;; 辞書を更新した回数
;;    (update-jisyo-count . 0)

;;    ;; buffer-local variables.

;;    ;; `skk-search-prog-list' の現在の値を保存するリスト
;;    ;; (current-search-prog-list . nil)

;;    ;; ミニバッファで候補を次々に表示して、候補が尽きたことを示す
;;    ;; (exit-show-candidates . nil)

;;    ;; ▼モード (変換中) であることを示す
;;    ;; (henkan-active . nil)

;;    ;; `skk-henkan-list' のリストのインデクスで現在の候補を差すもの
;;    ;; (henkan-count . -1)

;;    ;; 変換終了ポイントを示すマーカー
;;    ;; (henkan-end-point . nil)

;;    ;; ミニバッファで辞書登録を行ったときにこのフラグが立つ
;;    ;; (henkan-in-minibuff-flag . nil)

;;    ;; 変換すべき見出し語
;;    ;; (henkan-key . nil)

;;    ;; 変換結果の候補のリスト
;;    ;; (henkan-list . nil)


;;    ;; 現在の変換の送り仮名部分
;;    ;; (henkan-okurigana . nil)

;;    ;; ▽モード (変換対象の文字列決定のためのモード) であることを示す
;;    ;; (henkan-on . nil)

;;    ;; 変換開始ポイントを示すマーカー
;;    ;; (henkan-start-point . nil)

;;    ;; 確定して良い候補を見つけた状態であることを指す
;;    ;; (kakutei-flag . nil)

;;    ;; かな文字の開始ポイントを示すマーカー
;;    ;; (kana-start-point . nil)

;;    ;; 入力モードがカナモードであることを示す
;;    ;; (katakana . nil)

;;    ;; 辞書の送り有りエントリの終了点を示すバッファポイント
;;    ;; (okuri-ari-max . nil)

;;    ;; 辞書の送り有りエントリの開始点を示すバッファポイント
;;    ;; (okuri-ari-min . nil)

;;    ;; 変換すべき語の送り仮名の部分のプレフィックス
;;    ;; (okuri-char . nil)

;;    ;; `skk-henkan-list' のインデクスで自動送り処理、もしくはサ変検索で
;;    ;; 検索した最後の候補を指すもの
;;    ;; (okuri-index-max . -1)

;;    ;; `skk-henkan-list' のインデクスで自動送り処理、もしくはサ変検索で
;;    ;; 検索した最初の候補を指すもの
;;    ;; (okuri-index-min . -1)

;;    ;; 辞書の送りなしエントリの開始点を示すバッファポイント
;;    ;; (okuri-nasi-min . nil)

;;    ;; 送り仮名部分が入力中であることを示す
;;    ;;(okurigana . nil)

;;    ;; 送り仮名の開始ポイントを示すマーカー
;;    ;; (okurigana-start-point . nil)

;;    ;; 入力するかなを決定するためのプレフィックス
;;    ;; (prefix . "")

;;    ;; この変数に保持されるポイントが現在のポイントと異なる場合、
;;    ;; `skk-with-point-move' が使われていないコマンドを動作させると
;;    ;; `skk-after-point-move' が作動する
;;    ;; (previous-point . nil)

;;    ;; `skk-insert' もしくは `skk-jisx0208-latin-insert' で連続入力した
;;    ;; 文字数を表わすカウンター
;;    ;; (self-insert-non-undo-count . 1)))

(skk-deflocalvar skk-mode nil "\
Non-nil であれば、カレントバッファで現在 skk-mode を起動していることを示す。")

(skk-deflocalvar skk-latin-mode nil
  "Non-nil であれば、入力モードが ASCII モードであることを示す。")

(skk-deflocalvar skk-j-mode nil
  "Non-nil であれば、入力モードがかな・カナモードであることを示す。")

(skk-deflocalvar skk-katakana nil
  "Non-nil であれば、入力モードがカナモードであることを示す。
\"(and (not skk-katakana) skk-j-mode))\" が t であれば、かなモードであることを
示す。")

(skk-deflocalvar skk-jisx0208-latin-mode nil
  "Non-nil であれば、入力モードが全英モードであることを示す。")

(skk-deflocalvar skk-abbrev-mode nil
  "Non-nil であれば、入力モードが SKK abbrev モードであることを示す。")

(skk-deflocalvar skk-okurigana nil
  "Non-nil であれば、送り仮名部分が入力中であることを示す。")

(skk-deflocalvar skk-henkan-mode nil
  "変換モードを示す。
`on' であれば、▽モード。
`active' であれば、▼モード。
`nil' であれば、確定入力モード。")

(skk-deflocalvar skk-kakutei-flag nil
  "Non-nil なら確定して良い候補を見つけた状態であることを指す。
`skk-henkan', `skk-search-kakutei-jisyo-file', `skk-henkan-show-candidates',
`skk-henkan-in-minibuff' と `skk-kakutei-save-and-init-variables' で変更、
参照される。")

(skk-deflocalvar skk-exit-show-candidates nil
  "ミニバッファで候補を次々に表示して、候補が尽きたときに non-nil となる。
その値はリストで、car に `skk-henkan-show-candidate' 関数で while ループを
回った回数を示す一時変数 loop の値を、cdr 部に最後にミニバッファに表示した
1 つ前の候補群の最後の要素を指すインデクスが代入される。
`skk-henkan-show-candidates', `skk-henkan-in-minibuff' と
`skk-kakutei-save-and-init-variables' で変更、参照される。")

 ;; <キーマップ関連>
(skk-deflocalvar skk-current-rule-tree nil
  "ローマ字 -> かな変換の状態遷移規則を表わすツリーの現時点の状態。
ローマ字入力の初期では `skk-rule-tree' と同一の状態で、文字入力が進むに
つれ、木をたどってゆく状態の遷移を表す。")

;; <辞書関連の変数>
(skk-deflocalvar skk-okuri-ari-min nil
  "SKK 辞書の送り有りエントリの開始点を示すバッファポイント。")

(skk-deflocalvar skk-okuri-ari-max nil
  "SKK 辞書の送り有りエントリの終了点を示すバッファポイント。
skk-jisyo のバッファでは辞書の更新の必要があるためにマーカーが代入される。")

(skk-deflocalvar skk-okuri-nasi-min nil
  "SKK 辞書の送りなしエントリの開始点を示すバッファポイント。
skk-jisyo のバッファでは辞書の更新の必要があるためにマーカーが代入される。")

;; <その他>
(skk-deflocalvar skk-mode-line nil
  "SKK のモードを示すモードラインの文字列。
`skk-mode-string', `skk-hiragana-mode-string', `skk-katakana-mode-string',
 `skk-jisx0208-latin-mode-string' のいずれかが代入される。")

(skk-deflocalvar skk-previous-point nil
  "`skk-with-point-move' 関連変数。
この変数に保持されるポイントが現在のポイントと異なる場合、`skk-with-point-move'
が使われていないコマンドを動作させると、`skk-after-point-move' が作動する。")

(skk-deflocalvar skk-prefix ""
  "入力するかなを決定するためのプレフィックス。")

(skk-deflocalvar skk-henkan-start-point nil
  "変換開始ポイントを示すマーカー。")

(skk-deflocalvar skk-henkan-end-point nil
  "変換終了ポイントを示すマーカー。")

(skk-deflocalvar skk-kana-start-point nil
  "かな文字の開始ポイントを示すマーカー。")

(skk-deflocalvar skk-okurigana-start-point nil
  "送り仮名の開始ポイントを示すマーカー。")

(skk-deflocalvar skk-henkan-key nil
  "変換すべき見出し語。
例えば、\"▽かな\" を変換すれば、`skk-henkan-key' には \"かな\" が代入される。
\"▽わら*う\" のような送りありの変換の場合には、\"わらu\" のように、漢字部分の
読みがな + 送り仮名の最初の文字のローマ字のプレフィックスが代入される。")

(skk-deflocalvar skk-okuri-char nil
  "変換すべき語の送り仮名の部分のプレフィックス。
例えば、\"おく*り\" を変換するときは、`skk-okuri-char' は \"r\"。
`skk-okuri-char' が non-nil であれば、送りありの変換であることを示す。")

(skk-deflocalvar skk-henkan-okurigana nil
  "現在の変換の送り仮名部分。
例えば、\"▽うまれ*る\" を変換すれば、`skk-henkan-okurigana' には \"る\" が代入
される。")

(skk-deflocalvar skk-last-kakutei-henkan-key nil
  "確定辞書により最後に確定したときの見出し語。
確定辞書による確定の直後に x キーを押すと確定がアンドゥされて、確定前の状態で
この見出し語がカレントバッファに挿入される。")

(skk-deflocalvar skk-henkan-list nil
  "変換結果の候補のリスト。
例えば、\"▽な*く\" という変換すれば、`skk-henkan-list' は
(\"鳴\" \"泣\" \"無\" \"亡\") のようになる。")

(skk-deflocalvar skk-henkan-count -1
  "`skk-henkan-list' のリストのインデクスで現在の候補を差すもの。")

(skk-deflocalvar skk-self-insert-non-undo-count 1
  "連続入力した文字数を表わすカウンター。
`skk-insert' もしくは `skk-jisx0208-latin-insert' でカウントされる。
Emacs のオリジナルの動作では、`self-insert-command' にバインドされたキー入力は
連続 20 回までが 1 つのアンドゥの対象となる。この動作をエミュレートするための
カウンター。このカウンターが、20 以下であるときは、入力のたびに
`cancel-undo-boundary' がコールされる。")

(skk-deflocalvar skk-current-search-prog-list nil
  "`skk-search-prog-list' の現在の値を保存するリスト。
最初の変換時は `skk-search-prog-list' の全ての値を保持し、変換を繰り返すたびに
1 つずつ短くなってゆく。")

;; for skk-undo-kakutei
(skk-deflocalvar skk-last-henkan-data nil
  "最後に行った変換に関するデータの連想リスト。
ディフォルトのキーは、`henkan-key', `henkan-okurigana', `okuri-char',
`henkan-list' の各シンボル。
 (skk-num を require しているときは、num-list が追加される)。")

(skk-deflocalvar skk-henkan-overlay nil
  "候補を表示するときに使用する Overlay。")

(skk-deflocalvar skk-henkan-in-minibuff-flag nil
  "ミニバッファで辞書登録を行ったときにこのフラグが立つ。
skk-remove-common で参照される。")

(skk-deflocalvar skk-okuri-index-min -1
  "`skk-henkan-list'のインデクスを挿すポインタのひとつ。
自動送り処理・サ変検索で検索した最初の候補を指す。")

(skk-deflocalvar skk-okuri-index-max -1
  "skk-henkan-list のインデクスを挿すポインタのひとつ。
自動送り処理、もしくはサ変検索で検索した最後の候補を指す。")

(skk-deflocalvar skk-last-buffer-undo-list nil
  "▽モードに入る直前の buffer-undo-list を退避しておく変数。")

(skk-deflocalvar skk-last-buffer-modified nil
  "▽モードに入る直前のバッファ変更フラグを退避しておく変数。")

;;; -- SKK-COMP.EL related internal variables
;; ---- buffer local variables
;; 空文字列に対して skk-comp-do を呼ぶこともありうるので、"" を nil では代
;; 用できない。
(skk-deflocalvar skk-comp-key ""
  "補完すべき見出し語。
`skk-dabbrev-like-completion' が non-nil の場合は、常に最後に補完した見出し語が
代入される。")
;; 辞書登録時ミニバッファで補完した場合、元のバッファに戻ったときに
;; skk-comp-key の値が破壊されていない方がベター。

(skk-deflocalvar skk-comp-stack nil
  "補完した語を保存しておくスタック。")

(skk-deflocalvar skk-comp-depth 0
  "補完した語を skk-comp-stack から取り出す位置。")

(skk-deflocalvar skk-comp-kakutei-midasi-list nil
  "確定履歴から得られた見出し語のリスト。")

;;; -- SKK-CURSOR.EL related internal variables

;;; -- SKK-GADGET.EL related internal variables

;;; SKK-ISEARCH.EL related internal constants and variables.
(defconst skk-isearch-mode-canonical-alist
  '((hiragana . 0) (katakana . 1) (jisx0208-latin . 2) (latin . 3))
  "Alist of (SYMBOL . NUMBER).
The SYMBOL is canonical skk mode, and NUMBER is its numerical representation.")

(defconst skk-isearch-mode-alias-alist
  '((hirakana . hiragana) (kana . hiragana) (eiji . jisx0208-latin)
    (ascii . latin))
  "Alist of (ALIAS . CANONICAL).
The both ALIAS and CANONICAL should be symbol.
ALIAS can be used as an alias of CANONICAL.
CANONICAL should be found in `skk-isearch-mode-canonical-alist'. ")

(defconst skk-isearch-breakable-character-p-function
  (static-cond
   ((fboundp 'char-category-set)
    (function (lambda (char)
		;; see emacs/lisp/fill.el how the category `|' is
		;; treated.
		(aref (char-category-set char) ?|))))
   ((boundp 'word-across-newline)
    (function (lambda (char)
		;; (let ((lc (char-leading-char char)))
		;;   (or (= lc lc-jp) (= lc lc-cn)))
		(string-match word-across-newline
			      (char-to-string char)))))
   (t (error "No appropriate function as: %s"
	     'skk-isearch-breakable-character-p-function)))
  "Function to test if we can insert a newline around CHAR when filling.")

(defconst skk-isearch-working-buffer " *skk-isearch*"
  "Work buffer for skk isearch.")

(defvar skk-isearch-mode nil
  "Current search mode.
0 means hira kana search.
1 means kana search.
2 means zenkaku eiji (i.e. JIS X0208 alphabet) search.
3 means ascii search.")

(defvar skk-isearch-incomplete-message ""
  "Incomplete isearch message")

(defvar skk-isearch-mode-map nil
  "Keymap for skk isearch mode.
This map should be derived from isearch-mode-map.")

(defvar skk-isearch-overriding-local-map
  (static-cond
   ((eq skk-emacs-type 'xemacs)
    (cond
     ((string-lessp "21.2  (beta2)" emacs-version)
      'overriding-local-map)
     (t
      'overriding-terminal-local-map)))
   ;; for Mule/GNU Emacs.
   ((string-lessp "19.29" emacs-version)
    ;; GNU Emacs version 19.29 or later uses this in isearch.el.
    'overriding-terminal-local-map)
   ;; GNU Emacs version 19.28 or earlier uses this in isearch.el.
   (t
    'overriding-local-map))
  "Variable holding overrinding local map used in isearch-mode.")

(defvar skk-isearch-last-mode-string "")
(defvar skk-isearch-last-mode-regexp "")

;;;###autoload
(defvar skk-isearch-switch nil)
(defvar skk-isearch-state nil)
(defvar skk-isearch-in-editing nil)
(defvar skk-isearch-current-buffer nil)

;;; -- SKK-JISX0201.EL related internal constants and variables.
(defvar skk-jisx0201-base-rule-tree nil)
(defvar skk-jisx0201-roman-rule-tree nil)
(defvar skk-jisx0201-orig-rule-tree nil)
(skk-deflocalvar skk-jisx0201-roman nil)

(skk-deflocalvar skk-jisx0201-mode nil
  "Non-nil であれば、入力モードが JISX0201 モードであることを示す。")

;;; -- SKK-KCODE.EL related internal constants and variables.
(defconst skk-code-n1-min 161)
(defconst skk-code-n1-max (if (featurep 'jisx0213) 254 244))
(defconst skk-code-n2-min 161)
(defconst skk-code-n2-max 254)
(defconst skk-code-null 128)
(defconst skk-kcode-charset-list
  (static-if (memq skk-emacs-type '(xemacs mule5 mule4 mule3))
      (mapcar '(lambda (x) (list (symbol-name x))) (charset-list))))
(defvar skk-input-by-code-or-menu-jump-default skk-code-n1-min)

;;; SKK-LOOK.EL related internal constant and variable.
(defvar skk-look-completion-words nil)

;;; SKK-NUM.EL related internal constants and variables
(defconst skk-num-alist-type1
  '((?0 . "０") (?1 . "１") (?2 . "２") (?3 . "３")
    (?4 . "４") (?5 . "５") (?6 . "６") (?7 . "７")
    (?8 . "８") (?9 . "９")
    (?. . "．")	; 小数点。(?. . ".") の方が良い人もいるかも...。
    (?  . ""))
  "ascii 数字の char type と全角数字の string type の連想リスト。
\"1995\" -> \"１９９５\" のような文字列の変換を行う際に利用する。")

(defconst skk-num-alist-type2
  '((?0 . "〇") (?1 . "一") (?2 . "二") (?3 . "三")
    (?4 . "四") (?5 . "五") (?6 . "六") (?7 . "七")
    (?8 . "八") (?9 . "九") (?\  . ""))
  "ascii 数字の char type と漢数字の string type の連想リスト。
\"1995\" -> \"一九九五\" のような文字列の変換を行う際に利用する。")

(defconst skk-num-alist-type3
  (append
   '((ju . "十") (hyaku . "百") (sen . "千")
     (man . "万") (oku . "億") (cho . "兆") (kei . "京"))
   skk-num-alist-type2)
  "数字の漢字表記を表す連想リスト。
\"1995\" -> \"千九百九十五\" のような文字列の変換を行う際に利用する。")

(defconst skk-num-alist-type5
  '((ju . "拾") (hyaku . "百") (sen . "阡")
    (man . "萬") (oku . "億") (cho . "兆") (kei . "京")
    (?0 . "零") (?1 . "壱") (?2 . "弐") (?3 . "参")
    (?4 . "四") (?5 . "伍") (?6 . "六") (?7 . "七")
    (?8 . "八") (?9 . "九") (?\  . ""))
  "数字の漢字表記を表す連想リスト。
\"1995\" -> \"壱阡九百九拾伍\" のような文字列の変換を行う際に利用する。")

(skk-deflocalvar skk-num-list nil
  "skk-henkan-key の中に含まれる数字を表す文字列のリスト。
例えば、\"▽へいせい7ねん10がつ\" の変換を行うとき、skk-henkan-key は
\"へいせい7ねん10がつ\" であり、skk-num-list は \(\"7\" \"10\"\) となる。
\(buffer local\)")

(defvar skk-num-recompute-key nil
  "#4 タイプのキーにより数値の再計算を行ったときの検索キー。")

;;; SKK-SERVER.EL related internal constants and variables.
(defconst skk-network-open-status 'open)
(defconst skkserv-working-buffer " *skkserv*")
(defvar skkserv-process nil)

;;; SKK-VIPER.EL related internal variables and constants.
(defvar skk-viper-saved-cursor-color
  (when (and (featurep 'viper)
	     (boundp 'viper-insert-state-cursor-color))
    (symbol-value 'viper-insert-state-cursor-color)))
(make-variable-buffer-local 'viper-insert-state-cursor-color)

(defconst skk-viper-use-vip-prefix
  (not (fboundp 'viper-normalize-minor-mode-map-alist)))

(defconst skk-viper-normalize-map-function
  (if skk-viper-use-vip-prefix
      'vip-normalize-minor-mode-map-alist
    'viper-normalize-minor-mode-map-alist)
  "Viper が minor-mode-map-alist を調整するための関数。")

;;;; SKK-LOOKUP related user variables.
(defcustom skk-lookup-search-agents nil
  "*検索エージェントの設定のリスト。
リストの各要素は次の形式を取る:

  \(CLASS LOCATION [KEY1 VALUE1 \[KEY2 VALUE2 \[...\]\]\]\)

CLASS には、エージェントの種類をシンボルで指定する。
LOCATION には、エージェントの所在を文字列で指定する。
KEY 及び VALUE は省略可能で、エージェントに対するオプションを指定する。

例: (setq skk-lookup-search-agents
          '((ndtp \"dserver\" :port 2010)
            (ndeb \"/cdrom\" :enable (\"EIWA\")))))"
  :type '(repeat (sexp :tag "Agent"))	; type はちょっとややこしすぎ・・
  :group 'skk-lookup)

(defcustom skk-lookup-option-alist
  '(;; "[spla -> splat]"
    ("ispell" exact nil nil (not skk-okuri-char) ("-> \\([^ ]+\\)]$" . 1)
     nil nil)
    ;; what's this?
    ("jedict" exact nil nil (not skk-okuri-char) nil nil nil)
    ;; 知恵蔵
    ;; `▼ＩＭＦ［International Monetary Fund／International
    ;;            Metalworkers Federation］'
    ;; `ＩＭＦ（国際通貨基金）【International Monetary Fund】'
    ("CHIEZO" exact exact prefix t
     ("（\\(.+\\)）\\|【\\(.+\\)】$\\|［\\(.+\\)］$\\|^\\([^（【［］】）]+\\)$"
      .
      (cond ((match-beginning 1) 1)
	    ((match-beginning 2) 2)
	    ((match-beginning 3) 3)
	    ((match-beginning 4) 4)))
     "／\\|、\\|, " nil)
    ;; 「辞・典・盤」
    ;; `あか３ 淦", "ethanol'
    ("CHUJITEN" exact exact prefix t ("[０-９]* *\\([^ ]+\\)$" . 1) nil nil)
    ;; `(皮膚などの)あか <grime>", "《英》 (パイプなどの)あか <fur>'
    ("COLLOC" exact exact prefix t ("\\([^ 《》]+\\) <[a-z]+>$" . 1) nil nil)
    ;; ジーニアス英和, ジーニアス英和・和英辞典
    ;; `あか[淦]'
    ;; `いれかえ[入れ替え,入れ換え]'
    ("GENIUS" exact exact prefix t
     ;;("\\[\\(.+\\)\\]$" . 1) ;;can I use `$' for GENIUS?
     ("\\[\\(.+\\)\\]" . 1)
     "," nil)
    ;; Super統合辞書99 Disk1, 2/現代用語の基礎知識
    ;; `◆朱・株・殊・珠〔似たもの漢字〕' ; `・' が区切り文字であるときと
    ;;  そうでないときがあるなぁ...。
    ;; `◆赤ワイン・ブーム〔健康問題〕'
    ("GN99EP01" exact exact prefix t ("^◆\\([^〔〕]+\\)〔.+〕$" . 1) nil nil)
    ("GN99EP02" exact exact prefix t ("^◆\\([^〔〕]+\\)〔.+〕$" . 1) nil nil)
    ;; 岩波国語辞典
    ;; `したい【死体・屍体】'
    ;; `したい【支隊】【枝隊】'
    ;; `あい【愛】'
    ;; `あい(あゐ)【藍】'
    ;; `あい<gaiji=za52a>哀<gaiji=za52b>'
    ;; `だし【出し】【出し・〈出汁〉】【｛山車｝】'
    ;; `ふうきり【封切(り)】'
    ("IWAKOKU" exact exact prefix t
     ;; cannot use `$' for this.
     ("【\\(.+\\)】" . 1)
     "】【\\|・" "[〈〉｛｝()]")
    ;; "垢", "赤"
    ("KANWA" exact exact prefix t nil nil nil)
    ;; KOUJIEN: 広辞苑 第4版(岩波,EPWING) マルチメディア版
    ;; `あい【合い・会い】アヒ' ; これには `】$' を使えない。
    ;; `あい【間】アヒ'
    ;; `ウィ【oui フランス】'
    ;; `ソ【sol イタリア】'
    ;; `アリストテレス‐しゅぎ【―主義】'
    ;; `アートマン【_tman 梵】'; 未対応。外字を含む候補。_ は外字
    ("KOUJIEN" exact exact prefix t
     ("^\\([^【】]+\\)‐[ーぁ-ん]+【―\\([^【】]+\\)】$\\|\
【\\([a-zA-Z]+\\) [ーァ-ン]+】$\\|【\\([^【】]+\\)】" .
      (cond ((match-beginning 2) '(1 2))
	    ((match-beginning 3) 3)
	    ((match-beginning 4) 4)))
     "・"
     ;;"‐[ーぁ-ん]+【―\\|】$"
     nil)
    ;; KOJIEN: 広辞苑第5版(岩波,EPWING)
    ;; `でんし‐ブック【電子―】'
    ("KOJIEN" exact exact prefix t
     ("^\\([^【】]+\\)‐[ーぁ-ん]+【―\\([^【】]+\\)】$\\|\
【\\([a-zA-Z]+\\) [ーァ-ン]+】$\\|【\\([^【】]+\\)】\\|\
^[ーぁ-ん]+‐\\([ーァ-ン]+\\)【\\([^【】]+\\)―】$" .
      (cond ((match-beginning 2) '(1 2))
	    ((match-beginning 3) 3)
	    ((match-beginning 4) 4)
	    ((match-beginning 5) '(6 5))))
     "・"
     ;;"‐[ーぁ-ん]+【―\\|】$"
     nil)
    ;; KOKUGO: 三省堂 日本語辞典（現代国語、外来語）
    ;; `〈' は、当用漢字表にない漢字で、`《' は、当用漢字表にはあるが、その音、
    ;; 訓が当用漢字表の音訓表にない漢字。
    ("KOKUGO" exact exact prefix t ("【\\([^【】]+\\)】" . 1) "・" "[《〈]")
    ;; 「辞・典・盤」附属のマイペディア
    ;;`大和郡山(市)'
    ;;`ワシントン(George Washington)'
    ;;`ワシントン(州)'
    ;;`ワシントン Washington'
    ;;`アインシュタイン(Albert Einstein)'
    ;;`香良洲(町)'
    ;;`カラス (烏)'
    ;;`カラス(Maria Callas)'
    ("MYPAEDIA" exact exact prefix t
     ("\\([^ ]+\\)(.+)$\\|.+ (\\([^ ]+\\))$\\|^\\([^ ()]+\\)$" .
      (cond ((match-beginning 1) 1)
	    ((match-beginning 2) 2)
	    ((match-beginning 3) 3)))
     nil nil)
    ;;  mypaedia-fpw から生成した PC Success 版マイペディア (FreePWING 辞書)
    ;; `大和郡山 [やまとこおりやま] (市)'
    ;; `アインシュタイン (Albert Einstein)'
    ;; `ワシントン (Washington) (州)'
    ;; `ワシントン (Washington)'
    ;; `ワシントン (George Washington)'
    ;; `香良洲 [からす] (町)'
    ;; `カラス (烏) [カラス]'
    ;; `カラス (Maria Callas)'
    ;;("MYPAEDIA" exact exact prefix t
    ;; ("^\\([^ ]+\\) \\[.+\\] (.+)$\\|^[^ ]+ (\\(.+\\)) \\[.+\\]$\\|\
    ;;   ^\\([^][() ]+\\)\\( .+\\)?$" .
    ;;  (cond ((match-beginning 1) 1)
    ;;        ((match-beginning 2) 2)
    ;;        ((match-beginning 3) 3)))
    ;; nil nil)
    ;;
    ;; ニューアンカー英和
    ;; "あか２ 垢"
    ("NEWANC" exact exact prefix t ("[０-９]* *\\([^ ]+\\)$" . 1) nil nil)
    ;; what's this?
    ;; `　あか <scud２>',
    ;; `　「あか」 <rust>'
    ("PLUS" exact exact prefix t ("^　\\(.+\\) <[a-z０-９]+>$" . 1) nil nil))
  "*辞書毎の検索、文字切り出しオプション。
リストの各要素は下記の通り。

  0th: `lookup-dictionary-name' が返す文字列 (辞書種別を表わす)。
  1th: 送りなし変換の際の search method を示すシンボル。regexp は指定不可。
  2th: 送りあり変換で、かつ `skk-process-okuri-early' オプションを指定して
       いないとき (送り仮名決定の後に検索を開始するので、送り仮名が特定できる)
       の search method を示すシンボル。regexp は指定不可。nil を指定すると、
       送りあり変換の際はその辞書を検索しない。
  3th: 送りあり変換で、かつ `skk-process-okuri-early' であるとき (送り仮名
       決定の前に検索を開始しており、送り仮名が特定できないので、送り仮名のかな
       prefix を除いた部分を検索キーとして lookup に渡している) の search
       method を示す シンボル。regexp は指定不可。nil を指定すると送りあり変換
       の際はその辞書を検索しない。
  4th: S 式。この S 式を評価して nil になるときは検索しない。ある一定の条件を満
       した場合に検索しないように指定できる。
  5th: `lookup-entry-heading' が返す heading から候補として出力する文字列を切り
       出すための regexp 指定及び切り出しオプション。
       car に regexp を示す文字列、cdr に `match-string' に渡す count を指定
       する (5th に文字列だけを指定した場合は `match-string' には 1 が
       渡される)。
       cdr 部に S 式を指定することも可能。下記のように cond 式で条件判定すれば
       複数の regexp を or 指定することが可能。

          (cond ((match-beginning 1) 1)
                ((match-beginning 2) 2)
	        ((match-beginning 3) 3)
                ((match-beginning 4) 4))

       cdr 部の評価結果が数字のリストになるときは、その数字を順に match-string
       に渡して文字列を切り出し、それら連結した文字列を候補として返す。例えば、

          (cond ((match-beginning 5) '(6 5)))

       と指定すると、(match-beginning 5) が non-nil になった場合、
       (match-string 6) と (match-string 5) をその順に連結した文字列を候補とし
       て出力する。
       切り出さずに文字列全体を対象にするときは、5th に nil を指定する。
  6th: 切り出された文字列の中に更に複数の候補を含む場合の区切りを表わす
       regexp。
       複数の候補が同一 heading の中に出力されないときは、nil を指定する。
  7th: 切り出された文字列から特定の文字列を取り除く場合に指定する regexp。
       辞書の出力が辞書特有の記号文字を含む場合に指定する。

現在対応している辞書名は \"ispell\", \"jedict\", \"CHIEZO\", \"CHUJITEN\",
\"COLLOC\", \"GENIUS\", \"GN99EP01\", \"GN99EP02\", \"IWAKOKU\", \"KANWA\",
\"KOUJIEN\", \"KOJIEN\", \"MYPAEDIA\" \"NEWANC\" 及び \"PLUS\"。
`lookup-entry-heading' が自分の使用する辞書からどのような文字列を取り出すのか
確かめたいときは、`skk-lookup-pickup-headings' を使用する。例えば、

 (skk-lookup-pickup-headings \"こしょう\" 'exact)"
  ;; for checking.
  ;; (pp (mapcar (lambda (e)(cons (car e) (length e)))
  ;;	skk-lookup-option-alist))
  :type '(repeat
	  (list (string :tag "Dictionary name")
		(choice :tag "Search method for okuri nasi"
			(const exact) (const prefix)
			(const suffix) (const substring)
			(const keyword) (const text)
			(const nil))
		(choice
		 :tag "Search method for okuri ari (not process okuri early)"
		 (const exact) (const prefix)
		 (const suffix) (const substring)
		 (const keyword) (const text)
		 (const nil))
		(choice
		 :tag "Search method for okuri ari (process okuri early)"
		 (const exact) (const prefix)
		 (const suffix) (const substring)
		 (const keyword) (const text)
		 (const nil))
		(sexp :tag "S expression to search")
		(choice :tag "Regexp to substring candidate from heading"
			(cons regexp sexp) (const nil))
		(choice :tag "Regexp to split candidates"
			regexp (const nil))
		(choice :tag "Regexp to remove a string from candidates"
			regexp (const nil))))
  :group 'skk-lookup)

(defcustom skk-lookup-default-option-list
  '(exact exact prefix t ("【\\([^【】]+\\)】" . 1) "・" nil)
  ;; CRCEN: 三省堂 ニューセンチュリー英和・新クラウン和英辞典
  ;; KANJIGEN: Super統合辞書99 Disk2/漢字源 : EPWING
  ;; RIKAGAKU: 理化学辞典
  ;; WAEI: what's this?
  "*ディフォルトの辞書検索、文字切り出しオプション。
まず辞書名をキーにして `skk-lookup-option-alist' を引き、そこに辞書検索、文字切
り出しのオプションが見つかればそれを使用し、見つからなかった場合にこの変数で
指定される辞書検索、文字切り出しのオプションを使用する。

リストの各要素は下記の通り。

  0th: 送りなし変換の際の search method を示すシンボル。regexp は指定不可。
  1th: 送りあり変換で、かつ `skk-process-okuri-early' オプションを指定していな
       いとき (送り仮名決定の後に検索を開始するので、送り仮名が特定できる) の
       search method を示すシンボル。regexp は指定不可。nil を指定すると、送り
       あり変換の際はその辞書を検索しない。
  2th: 送りあり変換で、かつ `skk-process-okuri-early' である (送り仮名決定の前
       に検索を開始しており、送り仮名が特定できないので、送り仮名のかな prefix
       を除いた部分を検索キーとして lookup に渡している) ときの search method
       を示すシンボル。regexp は指定不可。nil を指定すると送りあり変換の際はそ
       の辞書を検索しない。
  3th: S 式。この S 式を評価して nil になるときは検索しない。ある一定の条件を満
       した場合に検索しないように指定できる。
  4th: `lookup-entry-heading' が返す heading から候補として出力する文字列を切り
       出すための regexp 指定及び切り出しオプション。
       car に regexp を示す文字列、cdr に match-string に渡す count を指定する
       (4th に文字列だけを指定した場合は match-string には 1 が渡される)。
       cdr 部に S 式を指定することも可能。下記のように cond 式で条件判定すれば
       複数の regexp を or 指定することが可能。

          (cond ((match-beginning 1) 1)
                ((match-beginning 2) 2)
	        ((match-beginning 3) 3)
                ((match-beginning 4) 4))

       cdr 部の評価結果が数字のリストになるときは、その数字を順に match-string
       に渡して文字列を切り出し、それら連結した文字列を候補として返す。例えば、

          (cond ((match-beginning 5) '(6 5)))

       と指定すると、(match-beginning 5) が non-nil になった場合、
       (match-string 6) と (match-string 5) をその順に連結した文字列を候補とし
       て出力する。
       切り出さずに文字列全体を対象にするときは、4th に nil を指定する。
  5th: 切り出された文字列の中に更に複数の候補を含む場合の区切りを表わす
        regexp。
       複数の候補が同一 heading の中に出力されないときは、nil を指定する。
  6th: 切り出された文字列から特定の文字列を取り除く場合に指定する regexp。
       辞書の出力が辞書特有の記号文字を含む場合に指定する。

このオプションで対応している辞書名は、\"CRCEN\", \"KANJIGEN\", \"RIKAGAKU\"
及び \"WAEI\".
`lookup-entry-heading' で取り出した文字列が下記のようになることを前提に
している。

  \"あ‐か【亜科】‥クワ\"
  \"あか【閼伽】\"
  \"こ‐しょう【小姓・小性】‥シヤウ\"

`lookup-entry-heading' が自分の使用する辞書からどのような文字列を取り出すのか
確かめたいときは、`skk-lookup-pickup-headings' を使用する。例えば、

 (skk-lookup-pickup-headings \"こしょう\" 'exact)"
  :type '(list (choice :tag "Search method for okuri nasi"
		       (const exact) (const prefix)
		       (const suffix) (const substring)
		       (const keyword) (const text)
		       (const nil))
	       (choice
		:tag "Search method for okuri ari (not process okuri early)"
		(const exact) (const prefix)
		(const suffix) (const substring)
		(const keyword) (const text)
		(const nil))
	       (choice :tag "Search method for okuri ari (process okuri early)"
		       (const exact) (const prefix)
		       (const suffix) (const substring)
		       (const keyword) (const text)
		       (const nil))
	       (sexp :tag "S expression to search")
	       (choice :tag "Regexp to substring candidate from heading"
		       (cons regexp sexp) (const nil))
	       (choice :tag "Regexp to split candidates"
		       regexp (const nil))
	       (choice :tag "Regexp to remove a string from candidates"
		       regexp (const nil)))
  :group 'skk-lookup)

(defcustom skk-lookup-search-modules nil
  "*検索モジュールの設定のリスト。"
  :type '(repeat (cons :tag "Module" (string :tag "Name")
		       (repeat :tag "Dictionary" (string :tag "ID"))))
  :group 'skk-lookup)

(defcustom skk-lookup-process-henkan-key-function nil
  "*Lookup に渡す際に検索キーを加工するファンクション。
送りあり変換の際のみコールされる。引数は加工すべき文字列 HENKAN-KEY。
返り値は car に加工した文字列、cdr に送り仮名の加工方法を示すマジックナンバー
を入れた cons cell。
マジックナンバーは、0 が送りなしを表わす (本 function では使用することはない)。
1 は送りあり変換で `skk-process-okuri-early' が nil の場合。
2 は送りあり変換で `skk-process-okuri-early' が non-nil の場合を表わす。
近い将来、skk-lookup.el 全体を通じてこのようなマジックナンバーを使わないように
改良される可能性がある。"
  :type '(choice function (const nil))
  :group 'skk-hooks-and-functions)

(defcustom skk-lookup-kana-vector
  ["ぁ" "あ" "ぃ" "い" "ぅ" "う" "ぇ" "え" "ぉ" "お"
   "か" "が" "き" "ぎ" "く" "ぐ" "け" "げ" "こ" "ご"
   "さ" "ざ" "し" "じ" "す" "ず" "せ" "ぜ" "そ" "ぞ"
   "た" "だ" "ち" "ぢ" "っ" "つ" "づ" "て" "で" "と" "ど"
   "な" "に" "ぬ" "ね" "の"
   "は" "ば" "ぱ" "ひ" "び" "ぴ" "ふ" "ぶ" "ぷ" "へ" "べ" "ぺ" "ほ" "ぼ" "ぽ"
   "ま" "み" "む" "め" "も"
   "ゃ" "や" "ゅ" "ゆ" "ょ" "よ"
   "ら" "り" "る" "れ" "ろ"
   "ゎ" "わ" "ゐ" "ゑ" "を" "ん"]
  "*skk-kana-rom-vector の prefix に対応するかな文字のベクトル。
ある prefix がどのかな文字に対応するかのマップを作るために参照する。"
  :type 'sexp
  :group 'skk-lookup)

;;;; SKK-LOOKUP related internal variables.
(defvar skk-lookup-agent-list nil)
(defvar skk-lookup-default-module nil)
(defvar skk-lookup-module-list nil)
(defvar skk-lookup-prefix-and-kana-map nil)

;; SKK-ANNORTATION related variables.
(defcustom skk-show-annotation nil
  "*Non-nil であれば、註釈を表示する。
辞書の候補に含まれる `;' 以降の文字列を変換の際、注記として\
エコーエリア、または別 Window に表示する。"
  :type 'boolean
  :group 'skk-annotation
  :group 'skk-misc)

(defcustom skk-annotation-function nil
  "*annotation を表示するかどうかのチェック時にコールされる関数。
non-nil を返すと annotation を表示する。annotation の対象とする文字列
を引数にして funcall される。"
  :type 'function
  :group 'skk-annotation
  :group 'skk-hooks-and-functions)

(defcustom skk-annotation-show-as-message t
  "*Non-nil であれば、注記をエコーエリアに表示する。"
  :type 'boolean
  :group 'skk-annotation
  :group 'skk-misc)

(defcustom skk-annotation-mode-hook nil
  "*SKK annotation mode に入ったときのフック。"
  :type 'hook
  :group 'skk-annotation
  :group 'skk-hooks-and-functions)

;; SKK-ANNORTATION related internal constants and variables.
;; constants.
(defconst skk-annotation-buffer
  "*SKK annotation*")

;; global variables.
(defvar skk-annotation-mode-map nil
  "*SKK annotation モードのキーマップ。")

(defvar skk-annotation-original-window-configuration nil
  "SKK annotation mode に入る前の window configuration。
skk-annotation-save-and-quit を呼ぶとこの window configuration
を使って SKK annotation mode に入る前の window 状態に戻す。")

(defvar skk-annotation-annotated-word nil
  "annotation を付けられる単語。")

;; buffer local variables.
(skk-deflocalvar skk-annotation-mode nil
  "Non-nil であれば、annotation モードであることを示す。")

;;; user variables.
(defface skk-dcomp-face
  '((((class color)) (:foreground "DarkKhaki"))
    (((class grayscale) (background light))
     (:foreground "DimGray" :italic t))
    (((class grayscale) (background dark))
     (:foreground "LightGray" :italic t)))
  "*Face used to highlight region dynamically completed."
  :group 'skk-dcomp
  :group 'skk-faces)

(defcustom skk-dcomp-activate t
  "*Non-nil であれば見出し語のダイナミックコンプリーションの機能を有効にする。"
  :type 'boolean
  :group 'skk-dcomp)

(defcustom skk-dcomp-face-priority 700
  "*Overlay/extent priority of `skk-dcomp-face'."
  :type 'integer
  :group 'skk-dcomp)

(defcustom skk-dcomp-keep-completion-keys nil
  ;;   (delq
  ;;    nil
  ;;    (list
  ;;     (car (rassoc (list nil 'skk-toggle-kana)
  ;;                  skk-rom-kana-rule-list))
  ;;     (car (rassoc (list nil 'skk-toggle-characters)
  ;;                  skk-rom-kana-rule-list))
  ;;     (car (rassoc (list nil 'skk-toggle-kana)
  ;;                  skk-rom-kana-base-rule-list))
  ;;     (car (rassoc (list nil 'skk-toggle-characters)
  ;;                  skk-rom-kana-base-rule-list))))
  "*自動コンプリーションされた見出し語を消さないキーのリスト。
通常は見出し語のコンプリーション後、次のキー入力をすると、自動コンプ
リーションされたキー入力が消えてしまうが、このリストに指定されたキー
入力があったときは自動コンプリーションされた見出し語を消さない。"
  :type '(choice (repeat string) (const nil))
  :group 'skk-dcomp
  :group 'skk-filenames)

;;; internal variables and constants.
(skk-deflocalvar skk-dcomp-start-point nil)
(skk-deflocalvar skk-dcomp-end-point nil)
(skk-deflocalvar skk-dcomp-extent nil)
(defvar skk-dcomp-face 'skk-dcomp-face)

;; SKK-DIC related internal constants and variables.

(defvar skk-dic-comp-first nil)

(require 'product)
(product-provide
    (provide 'skk-vars)
  (require 'skk-version))

;;; skk-vars.el ends here
